<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林伟源的技术博客</title>
  
  
  <link href="https://linweiyuan.github.io/atom.xml" rel="self"/>
  
  <link href="https://linweiyuan.github.io/"/>
  <updated>2023-01-13T01:21:15.495Z</updated>
  <id>https://linweiyuan.github.io/</id>
  
  <author>
    <name>林伟源</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Effective Java</title>
    <link href="https://linweiyuan.github.io/2023/01/01/Effective-Java.html"/>
    <id>https://linweiyuan.github.io/2023/01/01/Effective-Java.html</id>
    <published>2023-01-01T08:14:46.000Z</published>
    <updated>2023-01-13T01:21:15.495Z</updated>
    
    <content type="html"><![CDATA[<p>目录，有改动</p><h3 id="创建和销毁对象"><a href="#创建和销毁对象" class="headerlink" title="创建和销毁对象"></a>创建和销毁对象</h3><ul><li>考虑用静态工厂方法代替构造器</li><li>遇到多个构造器参数时考虑用构造器</li><li>用私有构造器或枚举类型强化 Singleton 属性</li><li>通过私有构造器强化不可实例化的能力</li><li>避免创建不必要的对象</li><li>消除过期的对象引用</li><li>避免使用终结方法</li></ul><h3 id="对于所有对象都通用的方法"><a href="#对于所有对象都通用的方法" class="headerlink" title="对于所有对象都通用的方法"></a>对于所有对象都通用的方法</h3><ul><li>重写 equals 时遵守通用约定</li><li>重写 equals 时记得重写 hashCode</li><li>始终要重写 toString</li><li>谨慎地重写 clone</li><li>考虑实现 Comparator 接口</li></ul><h3 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h3><ul><li>使类和成员的可访问性最小化</li><li>在公有类中访问 public 方法而非直接访问 public 属性</li><li>使可变性最小化</li><li>复合优先于继承</li><li>要么为继承而设计，并提供文档说明，要么就禁止继承</li><li>接口优先于抽象类</li><li>接口只用于定义类型</li><li>类层次优先于标签类</li><li>用函数对象表示策略</li><li>优先考虑静态成员类</li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ul><li>请不要在新代码中使用原生态类型</li><li>消除非受检警告</li><li>集合优先于数组</li><li>优先考虑泛型</li><li>优先考虑泛型方法</li><li>利用有限制通配符来提升 API 的灵活性</li><li>优先考虑类型安全的异构容器</li></ul><h3 id="枚举和注解"><a href="#枚举和注解" class="headerlink" title="枚举和注解"></a>枚举和注解</h3><ul><li>用 enum 代替 int 常量</li><li>用实例域代替序数</li><li>用 EnumSet 代替位域</li><li>用 EnumMap 代替序数索引</li><li>用接口模拟可伸缩的枚举</li><li>注解优先于命名模式</li><li>坚持使用 Override 注解</li><li>用标记接口定义类型</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>检查参数的有效性</li><li>必要时进行保护性拷贝</li><li>谨慎设计方法签名</li><li>慎用重载</li><li>慎用可变参数</li><li>返回零长度的数组或者集合，而不是 null</li><li>为所有导出的 API 元素编写文档注释</li></ul><h3 id="通用程序设计"><a href="#通用程序设计" class="headerlink" title="通用程序设计"></a>通用程序设计</h3><ul><li>将局部变量的作用域最小化</li><li>for-each 循环优先于传统的 for 循环</li><li>了解和使用类库</li><li>如果需要精确的答案，避免使用 float 和 double</li><li>基本类型优先于装箱基本类型</li><li>如果其他类型更适合，尽量避免使用字符串</li><li>当心字符串连接的性能</li><li>通过接口引用对象</li><li>接口优先于反射机制</li><li>谨慎地使用本地方法</li><li>谨慎地进行优化</li><li>遵守普遍接受的命名惯例</li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul><li>只针对异常的情况才使用异常</li><li>对可恢复的情况使用受检异常，对编程错误使用运行时异常</li><li>避免不必要地使用受检的异常</li><li>优先使用标准的异常</li><li>抛出与抽象相对应的异常</li><li>每个方法抛出的异常都要有文档</li><li>在细节消息中包含能捕获失败的信息</li><li>努力使失败保持原子性</li><li>不要忽略异常</li></ul><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><ul><li>同步访问共享的可变数据</li><li>避免过度同步</li><li>executor 和 task 优先于线程</li><li>并发工具优先于 wait 和 notify</li><li>线程安全性的文档化</li><li>慎用延迟初始化</li><li>不要依赖于线程调度器</li><li>避免使用线程组</li></ul><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><ul><li>谨慎地实现 Serializable 接口</li><li>考虑使用自定义的序列化形式</li><li>保护性地编写 readObject 方法</li><li>对于实例控制，枚举类型优先于 readResolve</li><li>考虑用序列化代理代替序列化实例</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录，有改动&lt;/p&gt;
&lt;h3 id=&quot;创建和销毁对象&quot;&gt;&lt;a href=&quot;#创建和销毁对象&quot; class=&quot;headerlink&quot; title=&quot;创建和销毁对象&quot;&gt;&lt;/a&gt;创建和销毁对象&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;考虑用静态工厂方法代替构造器&lt;/li&gt;
&lt;li&gt;遇到多个构造</summary>
      
    
    
    
    <category term="程序设计" scheme="https://linweiyuan.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="Java" scheme="https://linweiyuan.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机显卡直通 (PCI passthrough via OVMF)</title>
    <link href="https://linweiyuan.github.io/2022/11/25/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A-PCI-passthrough-via-OVMF.html"/>
    <id>https://linweiyuan.github.io/2022/11/25/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A-PCI-passthrough-via-OVMF.html</id>
    <published>2022-11-25T02:23:36.000Z</published>
    <updated>2023-01-13T01:21:15.511Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟机对显卡的支持一向并不是非常完美，比如 VirtualBox 虚拟机设置，显存部分一般最多拉到 128MB，是虚拟的，无法用物理机的显卡，哪怕这张显卡是闲置的</p><p>VMware 很久没用了，据我所知，也是不支持物理显卡（这里不考虑企业级软件）</p><p>而 KVM + QEMU 却可以通过 PCI passthrough 的方式将物理机的显卡直通给虚拟机用，非常厉害</p><h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><p>下面所有操作都是基于 Arch Linux，其他系统未测试，未来也不会测试</p><p>因为本质上还是虚拟机，所以要确保 BIOS 设置好了开启虚拟化</p><p>接着就是要开启 IOMMU，这个也要硬件的支持</p><ul><li>如果是 Intel 的 CPU，修改内核参数 <code>intel_iommu=on iommu=pt</code></li><li>如果是 AMD 的 CPU，默认就有一些设置，因此只需加 <code>iommu=pt</code>（Yes？）</li></ul><p>修改完内核参数要重新跑 <code>sudo grub-mkconfig -o /boot/grub/grub.cfg</code>，重启生效</p><p>然后就是要拿到硬件的一些 id，这些 id 将会作为硬件的唯一标识在直通的过程中被使用到（这个脚本可以在 Arch Wiki 找到）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">shopt</span> -s nullglob</span><br><span class="line"><span class="keyword">for</span> g <span class="keyword">in</span> $(find /sys/kernel/iommu_groups/* -maxdepth 0 -<span class="built_in">type</span> d | <span class="built_in">sort</span> -V); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;IOMMU Group <span class="variable">$&#123;g##*/&#125;</span>:&quot;</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> <span class="variable">$g</span>/devices/*; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\t<span class="subst">$(lspci -nns $&#123;d##*/&#125;)</span>&quot;</span></span><br><span class="line">    <span class="keyword">done</span>;</span><br><span class="line"><span class="keyword">done</span>;</span><br></pre></td></tr></table></figure><p>PCI passthrough 的处理是通过将显卡从你的宿主机隔离出来，其中又有多种处理方式</p><h1 id="多显卡"><a href="#多显卡" class="headerlink" title="多显卡"></a>多显卡</h1><p>如果你的电脑是多显卡，并且 Linux 系统没有独显需求，就可以使用这种方法</p><p>这种情况多数出现在笔记本，当然台式机也有，只是很多 CPU 型号都把核显砍了</p><p>如果有独显，CPU 里又已经有核显了，厂商会进行一些优化，平时用核显，但是当有专业需求的时候，走的就是独显；自己也可以通过 Optimus 或者 Bumblebee 来进行控制</p><p>我的笔记本之前只拿来写写 Java，就是用 nvidia-xrun 把整个独显都禁用掉，neofetch 也查不到，相当于不通电，这样来稍微省点电池消耗</p><p>如果宿主机跑的是 Linux，虚拟机跑的是 Windows，那就可以通过这种方式来进行设置</p><p>这种方法可以实现物理机和虚拟机同时存在，物理机显示用核显，因为都不用独显了，所以可以在物理机系统启动时就把显卡隔离出来，这个就需要修改 Linux 内核参数</p><p>将上面准备阶段拿到的 id，写进内核参数 <code>vfio-pci.ids=xxx</code>，也要重新生成 grub 配置，也是重启生效</p><p>接着修改 <code>/etc/modprobe.d/vfio.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MODULES=(... vfio_pci vfio vfio_iommu_type1 vfio_virqfd ...)</span><br><span class="line">...</span><br><span class="line">HOOKS=(... modconf ...)</span><br></pre></td></tr></table></figure><p>修改完这个后也要重新生成 <code>sudo mkinitcpio -p linux</code>，同样是重启生效</p><p>然后多显卡的前提配置就完成了</p><h1 id="单显卡"><a href="#单显卡" class="headerlink" title="单显卡"></a>单显卡</h1><p>单显卡有点特殊，物理机输出到显示器也要显卡，所以不能提前将其隔离</p><p>QEMU 提供了一个 <code>hook</code> 功能，当虚拟机执行到某个阶段时，可以执行一些特定的脚本</p><p>因此思路就有了</p><ul><li>系统开机，正常使用显卡显示</li><li>开启虚拟机时，执行 hook，释放掉占用的资源，将显卡在物理机上隔离出来</li><li>关闭虚拟机时，执行 hook，重新把显卡模块启用，开启 DM</li></ul><p>首先 id 要写在一个单独配置文件 <code>/etc/modprobe.d/vfio.conf</code> 里，这个起到的作用就是可以动态进行模块的加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">options vfio-pci ids=xxx</span><br></pre></td></tr></table></figure><p>接着要准备好 hook 脚本，路径是 <code>/etc/libvirt/hooks/qemu</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">OBJECT=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">OPERATION=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$OBJECT</span> == <span class="string">&quot;win10&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$OPERATION</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    <span class="string">&quot;prepare&quot;</span>)</span><br><span class="line">      prepare.sh 2&gt;&amp;1 | <span class="built_in">tee</span> -a /var/log/libvirt/hooks.log</span><br><span class="line">      ;;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;release&quot;</span>)</span><br><span class="line">      release.sh 2&gt;&amp;1 | <span class="built_in">tee</span> -a /var/log/libvirt/hooks.log</span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这里的 <code>win10</code> 是虚拟机的名称</p><p>开启虚拟机的监听脚本 <code>prepare.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -x</span><br><span class="line"></span><br><span class="line">systemctl stop lightdm</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> efi-framebuffer.0 &gt; /sys/bus/platform/drivers/efi-framebuffer/unbind</span><br><span class="line"></span><br><span class="line">modprobe -r nvidia_drm</span><br><span class="line">modprobe -r nvidia_modeset</span><br><span class="line">modprobe -r nvidia_uvm</span><br><span class="line">modprobe -r nvidia</span><br><span class="line"></span><br><span class="line">virsh nodedev-detach pci_0000_xxx</span><br><span class="line">virsh nodedev-detach pci_0000_xxx</span><br><span class="line"></span><br><span class="line">modprobe vfio_pci</span><br><span class="line">modprobe vfio</span><br><span class="line">modprobe vfio_iommu_type1</span><br><span class="line">modprobe vfio_virqfd</span><br></pre></td></tr></table></figure><p>其中的 <code>pci_0000_xxx</code> 是在查 id 的阶段拿到的，比如输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">06:00.0 VGA compatible controller [0300]: NVIDIA Corporation GA104 [GeForce RTX 3060 Ti] [10de:2486] (rev a1)</span><br></pre></td></tr></table></figure><p>则 <code>options vfio-pci ids=10de:2486</code>，<code>virsh nodedev-detach pci_0000_06_00_0</code></p><p>关闭虚拟机的监听脚本 <code>release.sh</code>，关闭其实就是一个反向的回滚操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -x</span><br><span class="line"></span><br><span class="line">modprobe -r vfio_pci</span><br><span class="line">modprobe -r vfio</span><br><span class="line">modprobe -r vfio_iommu_type1</span><br><span class="line">modprobe -r vfio_virqfd</span><br><span class="line"></span><br><span class="line">virsh nodedev-reattach pci_0000_xxx</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> efi-framebuffer.0 &gt; /sys/bus/platform/drivers/efi-framebuffer/bind</span><br><span class="line"></span><br><span class="line">modprobe nvidia_drm</span><br><span class="line">modprobe nvidia_modeset</span><br><span class="line">modprobe nvidia_uvm</span><br><span class="line">modprobe nvidia</span><br><span class="line"></span><br><span class="line">systemctl start lightdm</span><br></pre></td></tr></table></figure><p>这些脚本需要在安装完系统后再设置，或者先换别的名字，不然安装的时候就会被执行，然后黑屏</p><p>这个就是单显卡的前提配置</p><h1 id="系统安装及测试"><a href="#系统安装及测试" class="headerlink" title="系统安装及测试"></a>系统安装及测试</h1><p>多显卡进行系统安装时可以直接把显卡设置进去</p><p>单显卡则不可以，需要先安装系统，如果显卡设置进去，那物理机也要用，虚拟机也要用，就会卡住</p><p>平时 Windows 在系统安装完成后会自动在系统更新那里帮用户安装好显卡驱动，但是显卡直通这种方式最好是手动进行安装，Windows 不一定识别得出来，安装完驱动后，一切都和正常使用就没什么区别了</p><p>详细的过程可以查看下面视频</p><div class="video"><iframe src="//player.bilibili.com/player.html?aid=432933085&bvid=BV163411f7iP&cid=901769225&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><hr><p>参考链接：(PCI passthrough via OVMF)[<a href="https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF]">https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虚拟机对显卡的支持一向并不是非常完美，比如 VirtualBox 虚拟机设置，显存部分一般最多拉到 128MB，是虚拟的，无法用物理机的显卡，哪怕这张显卡是闲置的&lt;/p&gt;
&lt;p&gt;VMware 很久没用了，据我所知，也是不支持物理显卡（这里不考虑企业级软件）&lt;/p&gt;
&lt;p&gt;而</summary>
      
    
    
    
    <category term="虚拟机" scheme="https://linweiyuan.github.io/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="KVM" scheme="https://linweiyuan.github.io/tags/KVM/"/>
    
    <category term="QEMU" scheme="https://linweiyuan.github.io/tags/QEMU/"/>
    
    <category term="Nvidia" scheme="https://linweiyuan.github.io/tags/Nvidia/"/>
    
    <category term="VirtIO" scheme="https://linweiyuan.github.io/tags/VirtIO/"/>
    
  </entry>
  
  <entry>
    <title>分布式相关实践</title>
    <link href="https://linweiyuan.github.io/2022/11/05/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%B8%E5%85%B3%E5%AE%9E%E8%B7%B5.html"/>
    <id>https://linweiyuan.github.io/2022/11/05/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%B8%E5%85%B3%E5%AE%9E%E8%B7%B5.html</id>
    <published>2022-11-05T06:21:07.000Z</published>
    <updated>2023-01-13T01:21:15.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式-ID"><a href="#分布式-ID" class="headerlink" title="分布式 ID"></a>分布式 ID</h1><p>ID 在大部分场景下，都是用来区分一条记录，因此天然要求唯一性，并且根据业务需求，有的还要求趋势递增。在单节点的数据库环境下，可以利用数据库自身具备的自增特性，比如 Oracle 的 sequence，MySQL 的 auto_increment，Postgres 的 serial 等，但是在分布式集群环境下，各个数据库都有自己维护的一套自增 ID，因此可能出现多个数据库都是 ID &#x3D; 1 的情况，这样就有问题，因此就有了分布式 ID，要求全局唯一，并且具备高性能高可用。下面是几种方案（不是全部）</p><ul><li><p>数据库自增 ID<br>抛开事实不谈，如果仅仅说实现方式，这也是一种方法。还是利用数据库的自增 ID 解决，不同的是要在集群前面额外搞一个实例充当“工具库”的角色，API 先从这里拿到最新自增 ID，在插入数据的时候顺便把这个 ID 也一起提交</p><p>缺点也是很明显，并且非常的非主流，正经人谁这么搞</p></li><li><p>UUID<br>UUID 实现起来非常简单，并且使用得当的话基本不会重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString(); <span class="comment">// 36</span></span><br><span class="line"><span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// 32</span></span><br></pre></td></tr></table></figure><p>但是如果有需求说 ID 里面需要反映一些有意义的东西，比如订单号、时间戳等，这种方法就不适用</p><p>有好处吗？<br>有。这种 UUID 的方式在某种程度上可以防止一些越权的操作，比如 ID &#x3D; 1 是普通用户能看，ID &#x3D; 2 是超管才能看，那么如果 API 权限验证没处理好，可能普通用户就能看到超管的东西</p><p>坏处比好处多得多，比如 MySQL 特殊的数据结构，ID 在叶子节点上往往会有一个排序的操作，如果用 UUID，则每新增一条记录，都有可能会使得数据重新排序，影响性能</p></li><li><p>雪花算法<br>推特开源，通过多少位的时间戳 + 多少位的机器 ID + 多少位的序列号组成，详细的去看别人的文章</p><p>GitHub 上源码 <a href="https://github.com/twitter-archive/snowflake/tree/snowflake-2010">snowflake-2010</a> 在 10 年前就不更新了，除非手动调整机器时间，正常使用基本也不会重复<br>国内大厂则有其他类似的实现，比如百度的 <a href="https://github.com/baidu/uid-generator">UidGenerator</a>、滴滴的 <a href="https://github.com/didi/tinyid">Tinyid</a>、美团的 <a href="https://github.com/Meituan-Dianping/Leaf">Leaf</a></p></li><li><p>基于 Redis<br>主要用了 Redis 的 <code>INCRBY</code> 指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INCRBY key increment</span><br></pre></td></tr></table></figure><p>Redis 由于自身的单线程特点（高版本有多线程，但是是用来做其他事情的），里面的操作具备原子性，因此可以利用这条指令，每次增加 1，则可完成分布式 ID 的自增，并且不重复</p><p>但是还是老话，凡是引入了其他中间件，都要考虑高可用问题，让它们不要挂。如果 ID 增长了，但没来得及刷盘 Redis 就挂掉了，下次起来时，可能 ID 就会重复。这个时候往往需要 RDB + AOF 配合使用，RDB 保证实例启动的速度，AOF 则确保数据的一致性；还有就是一主二从三哨兵那一套</p></li></ul><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><p>单机事务的实现方式，通常是先把事务自动提交设置为 false，编写一堆逻辑，完了后手动 commit 或者 rollback<br>分布式事务主流的还是阿里的 Seata</p><p>Seata 里面有三个核心概念：</p><ul><li>Transaction Manager（事务管理器）：主要用来管理全局事务，需要单独部署一个 <code>seata-server</code> 的服务（支持 Nacos、Eureka、Redis、ZooKeeper 等多种注册中心，一般情况下，阿里系的东西多是配合 Nacos 使用，毕竟一家的），并且创建好全局事务和分支事务对应的表</li><li>Resource Manager（资源管理器）：主要用来管理分支事务</li><li>Transaction Coordinator（事务协调者）：类似警匪片中的谈判专家，维护全局事务和分支事务的状态，当事务提交或回滚的时候进行协调</li></ul><p>Seata 里面还有四种分布式事务解决方案：</p><ul><li>AT：Seata 默认模式，分阶段提交事务，但是在第一阶段就提交分支事务，那么回滚要怎么回滚呢？需要额外创建表，来记录数据修改前的状态，回滚时则进行和事务提交时相反的操作，达到最终一致；第一阶段无需锁定数据库资源，和下面的 XA 相比，性能好一点</li><li>XA：也是分阶段提交事务，第一阶段各个分支事务先准备，然后看结果返回就绪还是失败，如果就绪则在第二阶段提交事务，失败则回滚。这种模式，一般数据库都自带支持，所以实现起来比较简单，无需编写额外的代码或者建表；但是 XA 偏 CP，在第一阶段需要锁定数据库资源，强调强一致性，因此和上面的 AT 相比，性能较差，还牺牲了一定的可用性</li><li>TCC：同样是分阶段提交事务，分为 Try-Confirm-Cancel 三个阶段，需要额外的代码来处理对应业务逻辑。这样一来，在第一阶段就直接提交事务，性能比 XA 好，同时数据是通过代码来完成回滚的，无需建额外的表，比 AT 简单，并且由于事务都是由自己的代码来完成，对于不支持事务的存储引擎也可以使用。缺点就是需要自己额外写代码，并且考虑处理失败的情况，对人的要求就比较高了</li><li>SAGA：还是分阶段提交事务，一阶段直接提交事务，二阶段如果失败则通过代码来进行补偿操作，成功则什么都不做</li></ul><p>分布式事务，其实用得真不多，最多就是万一发生问题，通过日志排查来进行人工手动补偿，也有可能是用户量太少了，或 CRUD 做多了</p><h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><p>锁一般是用来解决多线程或者说高并发环境下共享变量的安全问题<br>当只有一个实例的时候，可以使用 <code>synchronized</code> 或者 <code>ReentrantLock</code> 等来进行加锁操作，但在多实例下，每个 JVM 进程都是独立的，单机锁就达不到想要的效果，因此大多都是需要借助第三方的力量，来提供一个全局加锁的功能</p><p>以最经典的抢票为例，多个人抢固定数量的票，如果处理得不得当，就会发生超卖的现象，是个人都提示抢到票，但实际上你的票并没有这么多，因为多线程下，总票数被频繁修改，没有安全保障</p><p>下面是常见的其中几种分布式锁解决方案</p><ul><li><p>MySQL 单条 update 语句<br>如果 JVM 存在多个，但是 MySQL 只有一个，这种算分布式吗？</p><p>当它算。由于 MySQL 只有一个，而 MySQL 在处理更新语句的时候，会默认进行一个加锁的操作，因此可以利用这种特性来充当分布式锁，比如下面的伪代码（不考虑边界问题）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表 <span class="keyword">set</span> 票数 <span class="operator">=</span> 票数 <span class="operator">-</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>当这个表存在多个列，并且需要充当查询条件的时候，需要注意索引的设置，比如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表 <span class="keyword">set</span> 票数 <span class="operator">=</span> 票数 <span class="operator">-</span> <span class="number">1</span> <span class="keyword">where</span> 目的地 <span class="operator">=</span> xxx;</span><br></pre></td></tr></table></figure><p>此时如果目的地没有添加索引，MySQL 触发的是表锁，整个表都不可用，但是如果在目的地上添加了索引，则触发的会是行锁，仅仅锁住当前目的地的数据，这样就提高了性能</p><p>当然要正确使用查询条件，如果使用“目的地 !&#x3D; xxx”，那就算添加了索引，也会触发表锁，因为索引会失效<br>这种方式仅仅适用简单的业务逻辑，如果想在修改票数前后添加一些额外的处理，就不行了</p></li><li><p>MySQL select for update 语句<br>和上面的类似，只是执行 <code>select for update</code> 锁住了所查记录后，还可以进行一些额外的操作，完了后再执行 <code>update</code> 语句，相对来说就会更加灵活</p><p>缺点在后面跟着，复杂操作更要注意加解锁的处理，防止死锁</p></li><li><p>MySQL 乐观锁<br>乐观锁的实现思想基本都来源于 CAS（Compare And Swap），当实际的值与预期的值一致，才将旧值更新成新值，否则就自旋，也就是循环（期间可以设置短时间的 sleep，减少 CPU 的无效操作）。最常见的落地方案就是数据库表加多一个 <code>version</code> 字段</p><p>先把 version 查出来，最后执行更新操作的时候再判断现在的 version 值是否和开始查到的是否一致，如果不一致，那就是被别人改过了，那就重新再拿一遍，再修改</p><p>虽然一般都说加锁是重量级的操作，但是这种 CAS 虽然不用加锁，但是好多循环，也会占用无谓的 CPU 资源，有时性能反而不如悲观锁，所以实际使用最好自己测试一下</p></li><li><p>Redis 乐观锁<br>主要利用 Redis 的 <code>WATCH</code> + <code>MULTI</code> + <code>EXEC</code> 指令实现</p><p>当 WATCH 了某个 key，开启 MULTI 后，其他线程如果修改了这个 key 的值，那么最后执行 EXEC 的时候就会返回 nil，成功则返回 OK</p><p>这样就实现了类似 version 的效果，执行失败，自旋，然后重新执行即可</p><p><code>redis-cli</code> 里是这三条指令，那么对应到 Java 代码里会是简单的三条相加吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">redisTemplate.watch(key);</span><br><span class="line">redisTemplate.multi();</span><br><span class="line">redisTemplate.exec();</span><br></pre></td></tr></table></figure><p>不是。如果按照上面的用法会报 <code>ERR EXEC without MULTI</code>，明明有 <code>multi()</code>，但为什么还是报这个错？因为用法不对，正确的用法是这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">SessionCallback</span>&lt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">        operations.watch(key);</span><br><span class="line">        operations.multi();</span><br><span class="line">        <span class="keyword">return</span> operations.exec();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Redis 分布式锁<br>利用 Redis 的 <code>SETNX</code> + <code>DEL</code> 指令实现，SETNX 进行 key 的设置的时候，如果这个 key 不存在，才会被设置，因此可以充当加锁操作；而解锁就仅仅需要把前面设置的 key 进行删除即可</p><p>SETNX 设置出来的属于独占锁（排他锁），一旦加锁成功，但是由于某些原因 API 挂了，这就会导致整个服务不可用，因为要解锁就必须先经过获取锁的那一步，而现在由于已经设置了锁，那就没办法再得到锁，因此没办法释放。所以需要给锁设置一个过期自动删除的时间</p><p>利用 Redis 的 <code>EXPIRE</code> 指令可以对 key 设置超时时间，完成上面的需求</p><p>Redis 还提供了 SETNX + EXPIRE 的组合指令，比如设置一个 10 秒过期的 key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value EX 10 NX</span><br></pre></td></tr></table></figure><p>其中 <code>EX</code> 表示秒，可换成 <code>PX</code> 表示毫秒；<code>NX</code> 表示不存在才设置，可换成 <code>XX</code> 表示存在才设置。由于是一条指令，因此具备原子性，对应到 Java 代码里则是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue().set(key, value, <span class="number">10</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>此时解决了一个问题，但是出现了新的问题</p><p>举个例子，假如 API 里设置了 10 秒过期自动释放锁，但是业务逻辑执行完需要 15 秒，此时执行到第 10 秒的时候，锁自动释放掉了，第二个线程拿到锁，但是前面的线程还没执行完，继续执行 5 秒后执行完毕，手动释放锁，这个时候的锁已经是第二个线程拿到的了，自己加的锁被别人释放了，这就有问题，因为释放锁的时候仅仅是执行一个删除 key 的操作，才不管这个锁是谁的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.delete(key);</span><br></pre></td></tr></table></figure><p>因此，需要加上一些判断，让自己的锁只有自己才能删</p><p>可能有人会想到说，既然要确保不能删除别人的锁，那是否让 key 每个线程不同就可以了？我删除的是 set 的时候生成的 key，如果删除了一个不存在的 key，就会失败，等于没删除</p><p>这也是正常人的思维，但是问题在于，每个 key 都不一样，起不到加锁的作用。因此不能在 key 上动手，而可以将矛盾转移到 value 上，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">redisTemplate.opsForValue().set(key, value, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (value.equals(redisTemplate.opsForValue().get(key))) &#123;</span><br><span class="line">    redisTemplate.delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就解决了自己加的锁只能自己删的问题</p><p>但是又引出了新的问题</p><p>当第一个线程进入 <code>if</code> 代码块，准备执行 <code>delete(key)</code> 的时候，刚好到了过期时间，key 被删了，刚好此时切到第二个线程拿到锁准备执行业务代码，刚好又切回第一个线程继续执行删除操作，就又造成了第二个线程的锁被第一个线程删掉。尽管通过 UUID 来确保了唯一性，但是进入 if 后，delete 操作还是只看 key，不管 UUID</p><p>原因在于，if 和 delete 操作不具备原子性，要解决这个问题，就需要借助 Redis 的 <code>EVAL</code> 指令来执行 <code>lua</code> 脚本</p><p>Redis 里面的操作具备原子性，因此 EVAL 指令具备原子性，因此执行 lua 脚本的操作也具备原子性，因此就算在脚本里写 N 行代码，还是具备原子性，因此可以在里面进行一些较为复杂的业务逻辑编写，因此可以把上面的判断搬进 lua 脚本里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">lua</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        if redis.call(&#x27;GET&#x27;, KEYS[1]) == ARGV[1]</span></span><br><span class="line"><span class="string">        then</span></span><br><span class="line"><span class="string">            return redis.call(&#x27;DEL&#x27;, KEYS[1])</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">            return 0</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>;</span><br><span class="line">redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(lua, Boolean.class), List.of(key), value);</span><br></pre></td></tr></table></figure><p>这样就确保了自己的 key 只有自己能删</p><p>但是还是有其他问题在</p><p>如果一个请求里面执行的业务逻辑获取了锁，但是需要调用别的方法执行另外的逻辑，这个方法里面也要先获得锁才能执行，但是前面的操作已经获取过一次锁，既然在前面已经获取了锁，方法还没执行完就不会释放，这个时候调用另一个方法，这个方法又需要先获取锁才能执行，就出现了死锁。因此，对于同一个请求，要允许它重复获得锁，需要做一个可重入的处理，类似 <code>ReentrantLock</code></p><p>要实现可重入，就需要记下来获取锁的次数，每次获取到锁，次数 +1，随着方法的调用完毕出栈 -1，最后减到 0 删除 key，达到释放锁的效果。如果用上面的数据结构，因为 value 是 UUID，因此可以在后面拼一个次数，比如 UUID:1，这样也是一种方法。但是 Redis 其实提供了一种更加合适的数据结构 Hash，用 <code>HSET</code> + <code>HEXISTS</code> + <code>HINCRBY</code> 指令可完成类似于对象的存储（不是那种文件的对象存储）</p><p>因为需要提前判断 key 是否存在，不存在则进行设置，存在则需要判断当前的锁是不是自己的，如果是则更新获取锁次数，逻辑较为复杂，因此可以借助 lua 脚本来完成</p><p>加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">lua</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        if redis.call(&#x27;EXISTS&#x27;, KEYS[1]) == 0 or redis.call(&#x27;HEXISTS&#x27;, KEYS[1], ARGV[1]) == 1</span></span><br><span class="line"><span class="string">        then</span></span><br><span class="line"><span class="string">            redis.call(&#x27;HINCRBY&#x27;, KEYS[1], ARGV[1], 1)</span></span><br><span class="line"><span class="string">            return 1</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">            return 0</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>;</span><br><span class="line">redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(lua, Boolean.class), List.of(key), value);</span><br></pre></td></tr></table></figure><p>解锁则进行相反的操作，当锁次数为 0 后，表示全部方法出栈，删除 key，否则就只是次数变化，加负数就是减法操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">lua</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        if redis.call(&#x27;HEXISTS&#x27;, KEYS[1], ARGV[1]) == 0</span></span><br><span class="line"><span class="string">        then</span></span><br><span class="line"><span class="string">            return nil</span></span><br><span class="line"><span class="string">        elseif redis.call(&#x27;HINCRBY&#x27;, KEYS[1], ARGV[1], -1) == 0</span></span><br><span class="line"><span class="string">        then</span></span><br><span class="line"><span class="string">            return redis.call(&#x27;DEL&#x27;, KEYS[1])</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">            return 0</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>;</span><br><span class="line">redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(lua, Boolean.class), List.of(key), value);</span><br></pre></td></tr></table></figure><p>这样就完成了可重入锁的设置</p><p>但是还有问题</p><p>由于设置了过期自动删除 key，因此可能出现业务还没执行完，就自动释放了锁，因此需要确保在代码的执行过程中，通过一些额外的操作来使这个 key 自动续期，达到永不过期的效果。在这个条件下，一旦业务没完成，就会一直自动续期，那么还需要设置过期时间吗？</p><p>需要。设置过期时间只是一个兜底的方案，理想情况下会是代码里进行加锁、解锁的操作，万一有故障发生，才会走超时自动释放锁的流程，防止死锁，所以两者并不冲突，反而相辅相成</p><p>为了完成这个操作，需要定期去判断 Redis 中是否还存在这个 key，存在则更新 key 的 <code>TTL</code>，最简单的就是利用 JDK 的 <code>Timer</code>，比如每隔 5 秒去更新下过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateTTL</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">lua</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            if redis.call(&#x27;HEXISTS&#x27;, KEYS[1], ARGV[1]) == 1</span></span><br><span class="line"><span class="string">            then</span></span><br><span class="line"><span class="string">                return redis.call(&#x27;EXPIRE&#x27;, KEYS[1], 10)</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                return 0</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Timer</span>().schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> Boolean.TRUE.equals(redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(lua, Boolean.class), List.of(key), value));</span><br><span class="line">            <span class="keyword">if</span> (success) &#123;</span><br><span class="line">                updateTTL();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">5</span> * <span class="number">1000</span>); <span class="comment">// 只设置 delay，没设置 period，因此只是一次性任务，无需再额外进行 cancel() 操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取锁成功时，调用这个方法开启定时任务，后面就只需要递归调用，当锁释放时，由于定时器里面返回 false，因此也会自动结束</p><p>可重入锁，则也需要加上更新过期时间的逻辑处理，比如 10 秒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis.call(&#x27;HINCRBY&#x27;, KEYS[1], ARGV[1], 1)</span><br><span class="line">redis.call(&#x27;EXPIRE&#x27;, KEYS[1], 10)</span><br></pre></td></tr></table></figure><p>这样就完成了自动续期，基本上满足大部分业务需求</p></li><li><p>Redlock<br>也直译成红锁，官方的一种 Redis 集群下的实现方式，文档：<a href="https://redis.io/docs/manual/patterns/distributed-locks">Distributed Locks with Redis</a></p><p>在集群的情况下，Redis 会分为主从节点，因为主从节点之间同步数据需要花费一定的时间，因此如果 API 在主节点中获取了锁，数据还没来得及同步到从节点，主节点挂了，哨兵机制会将从节点升级为主节点，如果 API 也是集群部署，则可能导致另一个实例能重新获取到新的锁，导致分布式锁失效</p><p>红锁的实现原理，简单来说就是，当获取锁的时候，从每个节点上都利用相同的 key 去获取，当超过 3 个以上节点获取锁成功（建议 5 个节点），才算成功。如果某个节点获取失败，则跳过，防止阻塞。另外再对在获取锁的过程中，和锁自动释放的时间进行一个处理，详细的话自己去看文档</p></li><li><p>Redisson<br>别人封装好的，用起来比较简单</p><p>其实去看里面的代码，核心部分也是通过 lua 脚本，和上面的差不多，只不过会做了一些不太容易看懂的优化，性能会更好，还有一些公平锁非公平锁的处理，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; RFuture&lt;T&gt; <span class="title function_">tryLockInnerAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, command,</span><br><span class="line">            <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">            Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title function_">unlockInnerAsync</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">            <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return nil;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;if (counter &gt; 0) then &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 0; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;del&#x27;, KEYS[1]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return nil;&quot;</span>,</span><br><span class="line">            Arrays.asList(getRawName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有比较丰富的中文文档：<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">目录</a></p></li><li><p>ZooKeeper<br>ZooKeeper 的 ZNodes 在设计上来说就是不可重复的，并且 ZooKeeper 偏向 CP，强调数据的一致性； ZooKeeper 提供了监听节点的机制；ZooKeeper 可以创建临时顺序节点；上面种种特性加起来，也是很适合用来做分布式锁</p><p>当有请求要获取锁的时候，给它创建一个临时顺序节点，并且监听上一个节点，如果上一个节点没了，表明自己是最前上面的，表示获取锁成功，业务执行完毕后删除节点释放锁，这样下一个节点监听到，它就能获取锁，以此类推，直到所有请求处理完成</p><p>由于用了顺序节点，每个请求都会创建不同的节点，删除的时候就不会出现误删的情况</p><p>可重入锁的实现思想和其他的也类似，也是记录下线程（也就是当前请求）相关的东西，进行 +1、-1 的操作。线程隔离的东西就可以考虑使用 <code>ThreadLocal</code></p><p>而临时节点天然防死锁，当创建一个临时节点时，如果 API 挂了，API 与 ZooKeeper 之间的连接就会断开，而 ZooKeeper 检测到连接断开，就会自动将临时节点删除</p></li><li><p>Curator<br>别人封装好的 ZooKeeper 客户端</p></li></ul><p>未完待续</p><hr><p>相关链接：<a href="https://linweiyuan.github.io/2022/05/22/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%B8%E5%85%B3%E7%90%86%E8%AE%BA.html">分布式相关理论</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分布式-ID&quot;&gt;&lt;a href=&quot;#分布式-ID&quot; class=&quot;headerlink&quot; title=&quot;分布式 ID&quot;&gt;&lt;/a&gt;分布式 ID&lt;/h1&gt;&lt;p&gt;ID 在大部分场景下，都是用来区分一条记录，因此天然要求唯一性，并且根据业务需求，有的还要求趋势递增。在单节</summary>
      
    
    
    
    <category term="架构设计" scheme="https://linweiyuan.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="分布式ID" scheme="https://linweiyuan.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8FID/"/>
    
    <category term="分布式锁" scheme="https://linweiyuan.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
    <category term="分布式事务" scheme="https://linweiyuan.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>自定义starter处理异常和请求响应日志</title>
    <link href="https://linweiyuan.github.io/2022/10/15/%E8%87%AA%E5%AE%9A%E4%B9%89starter%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E5%92%8C%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E6%97%A5%E5%BF%97.html"/>
    <id>https://linweiyuan.github.io/2022/10/15/%E8%87%AA%E5%AE%9A%E4%B9%89starter%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E5%92%8C%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E6%97%A5%E5%BF%97.html</id>
    <published>2022-10-15T17:35:34.000Z</published>
    <updated>2023-01-13T01:21:15.511Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub: <a href="https://github.com/linweiyuan/logger-spring-boot-starter">https://github.com/linweiyuan/logger-spring-boot-starter</a></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p><code>git clone https://github.com/linweiyuan/logger-spring-boot-starter.git</code></p><p><code>./gradlew publishToMavenLocal</code>（其实如果没有特殊的自定义构建脚本需求，感觉 maven 好很多，没有奇奇怪怪的问题）</p><h1 id="依赖处理"><a href="#依赖处理" class="headerlink" title="依赖处理"></a>依赖处理</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.linweiyuan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logger-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="异常日志处理"><a href="#异常日志处理" class="headerlink" title="异常日志处理"></a>异常日志处理</h1><p>启动类（或者其他叫法）添加 <code>@EnableExceptionLog</code> 注解</p><p>如果使用 <code>@EnableExceptionLog(allowOverride = true)</code>，注解上的配置就会失效，以配置文件为准，可以方便的进行修改而无需重新编译</p><p>支持如下属性</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">linweiyuan.logger.exception.border-color</span>=<span class="string">#ffffff</span></span><br><span class="line"><span class="attr">linweiyuan.logger.exception.border-background-color</span>=<span class="string">#ffffff</span></span><br><span class="line"><span class="attr">linweiyuan.logger.exception.border-blink</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">linweiyuan.logger.exception.text-color</span>=<span class="string">#ffffff</span></span><br><span class="line"><span class="attr">linweiyuan.logger.exception.text-background-color</span>=<span class="string">#ffffff</span></span><br><span class="line"><span class="attr">linweiyuan.logger.exception.text-bold</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">linweiyuan.logger.exception.text-italic</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">linweiyuan.logger.exception.text-blink</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">linweiyuan.logger.exception.empty-space-background-color</span>=<span class="string">#ffffff</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">linweiyuan:</span></span><br><span class="line">  <span class="attr">logger:</span></span><br><span class="line">    <span class="attr">exception:</span></span><br><span class="line">      <span class="attr">border-color:</span> <span class="string">&quot;#ffffff&quot;</span></span><br><span class="line">      <span class="attr">border-background-color:</span> <span class="string">&quot;#ffffff&quot;</span></span><br><span class="line">      <span class="attr">border-blink:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">text-color:</span> <span class="string">&quot;#ffffff&quot;</span></span><br><span class="line">      <span class="attr">text-background-color:</span> <span class="string">&quot;#ffffff&quot;</span></span><br><span class="line">      <span class="attr">text-bold:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">text-italic:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">text-blink:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">empty-space-background-color:</span> <span class="string">&quot;#ffffff&quot;</span></span><br></pre></td></tr></table></figure><p>如果使用 <code>@EnableExceptionLog(showAll = true)</code>，则会打印全部异常堆栈（默认是 <code>false</code>，也就是只打印注解所在类的包相关，Spring 一堆业务无关的不打印）</p><p>注解支持属性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableExceptionLog(</span></span><br><span class="line"><span class="meta">    showAll = true,</span></span><br><span class="line"><span class="meta">    borderColor = <span class="string">&quot;#ffffff&quot;</span>,</span></span><br><span class="line"><span class="meta">    borderBackgroundColor = <span class="string">&quot;#ffffff&quot;</span>,</span></span><br><span class="line"><span class="meta">    borderBlink = true,</span></span><br><span class="line"><span class="meta">    textColor = <span class="string">&quot;#ffffff&quot;</span>,</span></span><br><span class="line"><span class="meta">    textBackgroundColor = <span class="string">&quot;#ffffff&quot;</span>,</span></span><br><span class="line"><span class="meta">    textBold = true,</span></span><br><span class="line"><span class="meta">    textItalic = true,</span></span><br><span class="line"><span class="meta">    textBlink = true,</span></span><br><span class="line"><span class="meta">    emptySpaceBackgroundColor = <span class="string">&quot;#ffffff&quot;</span>,</span></span><br><span class="line"><span class="meta">    allowOverride = true</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><h1 id="请求响应日志"><a href="#请求响应日志" class="headerlink" title="请求响应日志"></a>请求响应日志</h1><p>这个不支持配置文件配置，只能在注解上进行</p><p>注解支持属性q</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableExceptionLog(</span></span><br><span class="line"><span class="meta">    borderColor = <span class="string">&quot;#ffffff&quot;</span>,</span></span><br><span class="line"><span class="meta">    borderBackgroundColor = <span class="string">&quot;#ffffff&quot;</span>,</span></span><br><span class="line"><span class="meta">    borderBlink = true,</span></span><br><span class="line"><span class="meta">    textColor = <span class="string">&quot;#ffffff&quot;</span>,</span></span><br><span class="line"><span class="meta">    textBackgroundColor = <span class="string">&quot;#ffffff&quot;</span>,</span></span><br><span class="line"><span class="meta">    textBold = true,</span></span><br><span class="line"><span class="meta">    textItalic = true,</span></span><br><span class="line"><span class="meta">    textBlink = true,</span></span><br><span class="line"><span class="meta">    emptySpaceBackgroundColor = <span class="string">&quot;#ffffff&quot;</span>,</span></span><br><span class="line"><span class="meta">    useDefaultColor = true</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><p>如果使用 <code>@EnableExceptionLog(useDefaultColor = true)</code>，则以下默认配置会生效</p><table><thead><tr><th>响应码</th><th>颜色</th></tr></thead><tbody><tr><td>2xx</td><td>绿</td></tr><tr><td>4xx</td><td>黄</td></tr><tr><td>5xx</td><td>红</td></tr></tbody></table><p>但是只有 API 返回的是 <code>ResponseEntity</code> 才会生效，试过用 <code>HttpServletResponse</code>，获取的响应码全是 200，可能还要再看看</p><div class="video"><iframe src="//player.bilibili.com/player.html?aid=604042935&bvid=BV1w84y1z7FP&cid=862852450&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/linweiyuan/logger-spring-boot-starter&quot;&gt;https://github.com/linweiyuan/logger-spring-boot-starter&lt;/a&gt;&lt;/</summary>
      
    
    
    
    <category term="程序设计" scheme="https://linweiyuan.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="Kotlin" scheme="https://linweiyuan.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Kotlin/"/>
    
    
    <category term="Kotlin" scheme="https://linweiyuan.github.io/tags/Kotlin/"/>
    
    <category term="Spring Boot" scheme="https://linweiyuan.github.io/tags/Spring-Boot/"/>
    
    <category term="Spring Boot Starter" scheme="https://linweiyuan.github.io/tags/Spring-Boot-Starter/"/>
    
  </entry>
  
  <entry>
    <title>Go+React实现一个基础的前后端分离问卷功能</title>
    <link href="https://linweiyuan.github.io/2022/10/05/Go-React%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%97%AE%E5%8D%B7%E5%8A%9F%E8%83%BD.html"/>
    <id>https://linweiyuan.github.io/2022/10/05/Go-React%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%97%AE%E5%8D%B7%E5%8A%9F%E8%83%BD.html</id>
    <published>2022-10-05T04:13:39.000Z</published>
    <updated>2023-01-13T01:21:15.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/2022/10/05/Go-React%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%97%AE%E5%8D%B7%E5%8A%9F%E8%83%BD/screenshot.png"></p><h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>取一个随便点的名字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> goquestionapi</span><br><span class="line"><span class="built_in">cd</span> goquestionapi</span><br><span class="line">git init</span><br><span class="line">go mod init github.com/linweiyuan/goquestionapi</span><br></pre></td></tr></table></figure><p>这里和数据库相关的操作会使用两个工具，<code>migrate</code> 和 <code>sqlc</code>，可以用 go 的方式安装，但这边习惯用 pacman，因为包升级好管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S sqlc</span><br><span class="line">yay -S migrate</span><br></pre></td></tr></table></figure><p>sqlc 是一个代码生成工具，生成的代码中连接数据库的部分用的是 Golang 原生 sql 库，性能极高（官方是这样说的）</p><p>为什么不用 GORM，因为由于多年 Java 开发经验先入为主，看到 GORM 的 API 好多时候会觉得莫名其妙，尝试过几遍，都弃坑了，并且据说有性能问题</p><p>sqlc 可以通过编写简单的 SQL 语句，来自动生成模板代码，那么只需要关注具体的业务逻辑即可，并且可以通过 sqlc.arg() 的方式给占位符起别名，使用起来比较顺手</p><p>数据库用的是 Postgres</p><p>对于这种一个问题多个答案，一对多的结构，其实我自己比较喜欢用 JSON 字段</p><p>为什么不直接用 MongoDB？其实工作多年接触的项目，只用过一次，不是很熟悉</p><p>为什么不用 MySQL？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   NAME                 CPU %     MEM USAGE / LIMIT     MEM %     NET I/O          BLOCK I/O        PIDS</span><br><span class="line">2057f98237b3   postgres             0.02%     28.57MiB / 15.49GiB   0.18%     3.03kB / 0B      0B / 43.4MB      7</span><br><span class="line">25959b7d7133   mysql                0.27%     159.5MiB / 15.49GiB   1.01%     6.85kB / 0B      115kB / 259MB    39</span><br><span class="line">ef2ecd22745f   mongo                0.30%     68.66MiB / 15.49GiB   0.43%     8.25kB / 0B      4.1kB / 1.29MB   33</span><br></pre></td></tr></table></figure><p>如果开了 performance_schema 呢（默认是开）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   NAME                 CPU %     MEM USAGE / LIMIT     MEM %     NET I/O          BLOCK I/O        PIDS</span><br><span class="line">bb4ba1c34299   mysql                0.26%     383MiB / 15.49GiB     2.42%     2.5kB / 0B       115kB / 247MB    39</span><br></pre></td></tr></table></figure><p>练手而已</p><p>目前所在公司，新项目也纷纷上 Postgres，不涉及到那些储存过程函数之类，转换下 database schema 概念，其实用起来都没什么区别</p><p>准备数据，数据是从网上拿的，主要是一些问题，然后对应的选项写死了分值，最后根据总分来判断性格（性格测试这东西我本人觉得极为扯淡，有些公司面试还要做，莫名其妙，如果我所在公司也要做，那我前面什么都没说，这个测试好得很，必须做）</p><p>数据准备好，就可以导入数据库，这里用的是 migrate，所以先准备第一版的 SQL</p><p>sqlc 配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">sql:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">engine:</span> <span class="string">&quot;postgresql&quot;</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">&quot;sqlc/migration&quot;</span></span><br><span class="line">    <span class="attr">queries:</span> <span class="string">&quot;sqlc/query&quot;</span></span><br><span class="line">    <span class="attr">gen:</span></span><br><span class="line">      <span class="attr">go:</span></span><br><span class="line">        <span class="attr">package:</span> <span class="string">&quot;sqlc&quot;</span></span><br><span class="line">        <span class="attr">out:</span> <span class="string">&quot;sqlc&quot;</span></span><br></pre></td></tr></table></figure><p>schema 是数据库建表、删表语句，queries 是业务 SQL 的编写地方，然后 package 是生成的 go 代码的包名，out 就是代码生成的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate create -ext sql -<span class="built_in">dir</span> sqlc/migration -<span class="built_in">seq</span> init</span><br></pre></td></tr></table></figure><p>migrate 参数：</p><ul><li>-ext: 数据脚本扩展名（后缀名）</li><li>-dir: 脚本文件所在地，配合上面 sqlc 的配置文件就是在 sqlc&#x2F;migration 里</li><li>-seq: 就是一个 sequence，自增</li><li>最后是文件名字</li></ul><p>上面的命令就会生成 000001_init.down.sql 和 000001_init.up.sql 这两个文件，up 就是新改动，down 就是回滚，和别的数据库 migration 一样</p><p>首先需要先创建 schema，这里 schema 叫 question，表也叫 question（表则可以在 migration sql 里创建）</p><p>创建好 schema 之后 migrate 和 sqlc 才会好使，不然会有先有鸡还是先有蛋的问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA question;</span><br></pre></td></tr></table></figure><p>准备 up sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br><span class="line">    question (</span><br><span class="line">        id SERIAL <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        title <span class="type">VARCHAR</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        answer JSON <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">        score JSON <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span></span><br><span class="line">    question (title, answer, score)</span><br><span class="line"><span class="keyword">VALUES</span> (</span><br><span class="line">        <span class="string">&#x27;你更喜欢吃那种水果&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;草莓&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;苹果&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;西瓜&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;菠萝&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;橘子&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 15</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;你平时休闲经常去的地方&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;郊外&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;电影院&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;公园&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;商场&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;酒吧&quot;,</span></span><br><span class="line"><span class="string">&quot;F&quot;: &quot;练歌房&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 15,</span></span><br><span class="line"><span class="string">&quot;F&quot;: 20</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;你认为容易吸引你的人是&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;有才气的人&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;依赖你的人&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;优雅的人&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;善良的人&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;性情豪放的人&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 15</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;如果你可以成为一种动物，你希望自己是哪种&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;猫&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;马&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;大象&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;猴子&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;狗&quot;,</span></span><br><span class="line"><span class="string">&quot;F&quot;: &quot;狮子&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 15,</span></span><br><span class="line"><span class="string">&quot;F&quot;: 20</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;天气很热，你更愿意选择什么方式解暑&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;游泳&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;喝冷饮&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;开空调&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 15</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;如果必须与一个你讨厌的动物或昆虫在一起生活，你能容忍哪一个&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;蛇&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;猪&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;老鼠&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;苍蝇&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 15</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;你喜欢看哪类电影、电视剧&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;悬疑推理类&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;童话神话类&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;自然科学类&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;伦理道德类&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;战争枪战类&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 15</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;以下哪个是你身边必带的物品&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;打火机&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;口红&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;记事本&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;纸巾&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;手机&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 10</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;你出行时喜欢坐什么交通工具&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;火车&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;自行车&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;汽车&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;飞机&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;步行&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 15</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;以下颜色你更喜欢哪种&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;紫&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;黑&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;蓝&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;白&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;黄&quot;,</span></span><br><span class="line"><span class="string">&quot;F&quot;: &quot;红&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 8,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 12,</span></span><br><span class="line"><span class="string">&quot;F&quot;: 15</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;下列运动中挑选一个你最喜欢的（不一定擅长）&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;瑜珈&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;自行车&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;乒乓球&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;拳击&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;足球&quot;,</span></span><br><span class="line"><span class="string">&quot;F&quot;: &quot;蹦极&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 8,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;F&quot;: 15</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;如果你拥有一座别墅，你认为它应当建立在哪里&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;湖边&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;草原&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;海边&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;森林&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;城中区&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 15</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;你更喜欢以下哪种天气现象&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;雪&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;风&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;雨&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;雾&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;雷电&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 15</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;你希望自己的窗口在一座30层大楼的第几层&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;七层&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;一层&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;二十三层&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;十八层&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;三十层&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 2,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 15</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    ), (</span><br><span class="line">        <span class="string">&#x27;你认为自己更喜欢在以下哪一个城市中生活&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: &quot;丽江&quot;,</span></span><br><span class="line"><span class="string">&quot;B&quot;: &quot;拉萨&quot;,</span></span><br><span class="line"><span class="string">&quot;C&quot;: &quot;昆明&quot;,</span></span><br><span class="line"><span class="string">&quot;D&quot;: &quot;西安&quot;,</span></span><br><span class="line"><span class="string">&quot;E&quot;: &quot;杭州&quot;,</span></span><br><span class="line"><span class="string">&quot;F&quot;: &quot;北京&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&quot;A&quot;: 1,</span></span><br><span class="line"><span class="string">&quot;B&quot;: 3,</span></span><br><span class="line"><span class="string">&quot;C&quot;: 5,</span></span><br><span class="line"><span class="string">&quot;D&quot;: 8,</span></span><br><span class="line"><span class="string">&quot;E&quot;: 10,</span></span><br><span class="line"><span class="string">&quot;F&quot;: 15</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate -path sqlc/migration -database <span class="string">&quot;postgresql://postgres:postgres@localhost:5432/postgres?sslmode=disable&amp;search_path=question&quot;</span> -verbose up</span><br></pre></td></tr></table></figure><p>down sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> question;</span><br></pre></td></tr></table></figure><p>同理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate -path sqlc/migration -database <span class="string">&quot;postgresql://postgres:postgres@localhost:5432/postgres?sslmode=disable&amp;search_path=question&quot;</span> -verbose down</span><br></pre></td></tr></table></figure><p>接着就是编写获取问题列表的 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: GetQuestions :many</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> q.id, q.title, q.answer <span class="keyword">FROM</span> question q <span class="keyword">ORDER</span> <span class="keyword">BY</span> q.id;</span><br></pre></td></tr></table></figure><p>根据 sqlc 的规范，<code>-- name: 方法名</code>，这些空格都是必须的，如果返回一条数据就 <code>:one</code>，多条则 <code>:many</code>，如果只是增删，可以用 <code>:exec</code></p><p>执行 <code>sqlc generate</code></p><p>这样就会生成好几个 go 文件，其中生成的方法类似</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span></span> GetQuestions(ctx context.Context) ([]GetQuestionsRow, <span class="type">error</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是每次都要输入这么长的命令，虽然可以键盘上下，但是有更好的方法，就是 <code>Makefile</code></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">up:</span></span><br><span class="line">migrate -path sqlc/migration -database <span class="string">&quot;postgresql://postgres:postgres@localhost:5432/postgres?sslmode=disable&amp;search_path=question&quot;</span> -verbose up</span><br><span class="line"></span><br><span class="line"><span class="section">down:</span></span><br><span class="line">migrate -path sqlc/migration -database <span class="string">&quot;postgresql://postgres:postgres@localhost:5432/postgres?sslmode=disable&amp;search_path=question&quot;</span> -verbose down</span><br><span class="line"></span><br><span class="line"><span class="section">gen:</span></span><br><span class="line">sqlc generate</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: up down gen</span></span><br></pre></td></tr></table></figure><p><code>.PHONY</code> 的作用就是确保执行的是这里定义的命令，比如 Makefile 里定义个 ls，如果不加到 .PHONY 里，则执行的是系统的 ls</p><h2 id="编写业务逻辑"><a href="#编写业务逻辑" class="headerlink" title="编写业务逻辑"></a>编写业务逻辑</h2><p>定义配置类，用到了 <code>viper</code>，有一个好处就是 <code>AutomaticEnv()</code> 能够将环境变量覆盖掉代码配置，这样在部署的时候非常方便，日志则用了 logrus，可以设置不同的级别，还有颜色输出，Java 过来表示很亲切</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">configFileName   = <span class="string">&quot;app&quot;</span></span><br><span class="line">configFileSuffix = <span class="string">&quot;env&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">ServerPort <span class="type">string</span> <span class="string">`mapstructure:&quot;SERVER_PORT&quot;`</span></span><br><span class="line"></span><br><span class="line">DBDriver <span class="type">string</span> <span class="string">`mapstructure:&quot;DB_DRIVER&quot;`</span></span><br><span class="line">DBSource <span class="type">string</span> <span class="string">`mapstructure:&quot;DB_SOURCE&quot;`</span></span><br><span class="line"></span><br><span class="line">LogLevel <span class="type">string</span> <span class="string">`mapstructure:&quot;LOG_LEVEL&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadConfig</span><span class="params">(path <span class="type">string</span>)</span></span> (config Config) &#123;</span><br><span class="line">viper.AddConfigPath(path)</span><br><span class="line">viper.SetConfigName(configFileName)</span><br><span class="line">viper.SetConfigType(configFileSuffix)</span><br><span class="line">viper.AutomaticEnv()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to load config file: [%v]&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := viper.Unmarshal(&amp;config); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to parse config file: [%v]&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logLevel, err := log.ParseLevel(config.LogLevel)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to get log level: [%v]&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.SetLevel(logLevel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以开启调试了，可以 build 或者直接 run，或者用其他热加载的工具，这里用到了 <code>gowatch</code></p><p>直接执行 gowatch 就可以将终端晾在一边了，和前端开发的体验没什么区别，Java 就要重启，没用过 JRebel</p><p>此时访问本地 8080 就能得到 404 的正确响应了</p><p>接着加一个 <code>CORS</code> 的中间件，这里不加，前端就要 <code>proxy</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CORS</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">log.Debug(<span class="string">&quot;handle cors...&quot;</span>)</span><br><span class="line"></span><br><span class="line">ctx.Writer.Header().Set(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">ctx.Writer.Header().Set(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ctx.Request.Method == http.MethodOptions &#123;</span><br><span class="line">ctx.AbortWithStatus(http.StatusNoContent)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.Next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给 server 加上</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.Use(middleware.CORS())</span><br></pre></td></tr></table></figure><p>API</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/linweiyuan/goquestionapi/sqlc&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> QuestionAPI <span class="keyword">struct</span> &#123;</span><br><span class="line">db *sqlc.Queries</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQuestionAPI</span><span class="params">(db *sqlc.Queries)</span></span> *QuestionAPI &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;QuestionAPI&#123;db&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(api *QuestionAPI)</span></span> GetQuestions(ctx *gin.Context) &#123;</span><br><span class="line">questions, err := api.db.GetQuestions(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Errorf(<span class="string">&quot;failed to get questions: [%v]&quot;</span>, err)</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, gin.H&#123;</span><br><span class="line"><span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;questions&quot;</span>: questions,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由配置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/linweiyuan/goquestionapi/api&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> QuestionRouter <span class="keyword">struct</span> &#123;</span><br><span class="line">api *api.QuestionAPI</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQuestionRouter</span><span class="params">(api *api.QuestionAPI)</span></span> *QuestionRouter &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;QuestionRouter&#123;api&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(router *QuestionRouter)</span></span> Setup(routerGroup *gin.RouterGroup) &#123;</span><br><span class="line">group := routerGroup.Group(<span class="string">&quot;/questions&quot;</span>)</span><br><span class="line">group.GET(<span class="string">&quot;&quot;</span>, router.api.GetQuestions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给 server 加上，并且让其具有查询 db 的功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sqlDB, err := sql.Open(config.DBDriver, config.DBSource)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">&quot;failed to connect to DB: [%v]&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db := sqlc.New(sqlDB)</span><br><span class="line"></span><br><span class="line">rg := server.Group(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">router.NewQuestionRouter(api.NewQuestionAPI(db)).Setup(rg)</span><br></pre></td></tr></table></figure><p>需要注意一点就是，要让 db 的驱动执行初始化动作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br></pre></td></tr></table></figure><p>接着再访问 <code>http://localhost:8080/questions</code>，就能看到数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;questions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ID&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你更喜欢吃那种水果&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Answer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;A&quot;</span><span class="punctuation">:</span> <span class="string">&quot;草莓&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;B&quot;</span><span class="punctuation">:</span> <span class="string">&quot;苹果&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;C&quot;</span><span class="punctuation">:</span> <span class="string">&quot;西瓜&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;D&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菠萝&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;E&quot;</span><span class="punctuation">:</span> <span class="string">&quot;橘子&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ID&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你认为自己更喜欢在以下哪一个城市中生活&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Answer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;A&quot;</span><span class="punctuation">:</span> <span class="string">&quot;丽江&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;B&quot;</span><span class="punctuation">:</span> <span class="string">&quot;拉萨&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;C&quot;</span><span class="punctuation">:</span> <span class="string">&quot;昆明&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;D&quot;</span><span class="punctuation">:</span> <span class="string">&quot;西安&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;E&quot;</span><span class="punctuation">:</span> <span class="string">&quot;杭州&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;F&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但是 json 的 key 全部大写了，可以在 sqlc 上配置 <code>emit_json_tags</code>，修改后的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">sql:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">engine:</span> <span class="string">&quot;postgresql&quot;</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">&quot;sqlc/migration&quot;</span></span><br><span class="line">    <span class="attr">queries:</span> <span class="string">&quot;sqlc/query&quot;</span></span><br><span class="line">    <span class="attr">gen:</span></span><br><span class="line">      <span class="attr">go:</span></span><br><span class="line">        <span class="attr">package:</span> <span class="string">&quot;sqlc&quot;</span></span><br><span class="line">        <span class="attr">out:</span> <span class="string">&quot;sqlc&quot;</span></span><br><span class="line">        <span class="attr">emit_json_tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>再重新跑一遍 <code>make gen</code>，再刷新页面，就能拿到小写的 key，比较符合习惯</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;questions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你更喜欢吃那种水果&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;answer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;A&quot;</span><span class="punctuation">:</span> <span class="string">&quot;草莓&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;B&quot;</span><span class="punctuation">:</span> <span class="string">&quot;苹果&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;C&quot;</span><span class="punctuation">:</span> <span class="string">&quot;西瓜&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;D&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菠萝&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;E&quot;</span><span class="punctuation">:</span> <span class="string">&quot;橘子&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你认为自己更喜欢在以下哪一个城市中生活&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;answer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;A&quot;</span><span class="punctuation">:</span> <span class="string">&quot;丽江&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;B&quot;</span><span class="punctuation">:</span> <span class="string">&quot;拉萨&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;C&quot;</span><span class="punctuation">:</span> <span class="string">&quot;昆明&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;D&quot;</span><span class="punctuation">:</span> <span class="string">&quot;西安&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;E&quot;</span><span class="punctuation">:</span> <span class="string">&quot;杭州&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;F&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>至此获取问题列表 API 完成，接着是答题然后计算分数</p><p>这里用到下面的数据结构进行提交，思路还是逐条拿分数出来再叠加，没有太多花里胡哨的 SQL</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;answers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span></span><br><span class="line">        ...</span><br><span class="line"><span class="attr">&quot;15&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>于是根据题目拿分数的 SQL 就会是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: GetQuestionScoreByID :one</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> (</span><br><span class="line">        q.score <span class="operator">-</span><span class="operator">&gt;&gt;</span> sqlc.arg(answer) :: TEXT</span><br><span class="line">    ) :: <span class="type">INT</span> <span class="keyword">AS</span> score</span><br><span class="line"><span class="keyword">FROM</span> question q</span><br><span class="line"><span class="keyword">WHERE</span> q.id <span class="operator">=</span> sqlc.arg(id);</span><br></pre></td></tr></table></figure><p>这里可以用 <code>$1</code>，<code>$2</code> 等的占位符，不过用 <code>sqlc.arg()</code> 就会更加顾名思义一些</p><p>再执行 <code>make gen</code>，生成新代码</p><p>接着编写完答题 API （练手而已，没有太多封装）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> answersRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Answers json.RawMessage <span class="string">`json:&quot;answers&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(api *QuestionAPI)</span></span> HandleAnswers(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req answersRequest</span><br><span class="line">err := ctx.ShouldBindJSON(&amp;req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Errorf(<span class="string">&quot;failed to bind answers json: [%v]&quot;</span>, err)</span><br><span class="line">ctx.JSON(http.StatusBadRequest, util.HandleError(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">totalScore := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">questionAnswerMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">json.Unmarshal(req.Answers, &amp;questionAnswerMap)</span><br><span class="line"><span class="keyword">for</span> questionID, answer := <span class="keyword">range</span> questionAnswerMap &#123;</span><br><span class="line">getAnswerMappingParams := sqlc.GetQuestionScoreByIDParams&#123;</span><br><span class="line">Answer: answer,</span><br><span class="line">ID:     <span class="type">int32</span>(questionID),</span><br><span class="line">&#125;</span><br><span class="line">score, err := api.db.GetQuestionScoreByID(ctx, getAnswerMappingParams)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Errorf(<span class="string">&quot;failed to get answer score, questionID: [%d], answer: [%s]&quot;</span>, questionID, answer)</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, util.HandleError(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">totalScore += <span class="type">int</span>(score)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result <span class="type">string</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> totalScore &gt;= <span class="number">180</span>:</span><br><span class="line">result = <span class="string">&quot;意志力强，头脑冷静，有较强的领导欲，事业心强，不达目的不罢休。外表和善，内心自傲，对有利于自己的人际关系比较看重，有时显得性格急噪，咄咄逼人，得理不饶人，不利于自己时顽强抗争，不轻易认输。思维理性，对爱情和婚姻的看法很现实，对金钱的欲望一般。&quot;</span></span><br><span class="line"><span class="keyword">case</span> totalScore &gt;= <span class="number">140</span> &amp;&amp; totalScore &lt; <span class="number">179</span>:</span><br><span class="line">result = <span class="string">&quot;聪明，性格活泼，人缘好，善于交朋友，心机较深。事业心强，渴望成功。思维较理性，崇尚爱情，但当爱情与婚姻发生冲突时会选择有利于自己的婚姻。金钱欲望强烈。&quot;</span></span><br><span class="line"><span class="keyword">case</span> totalScore &gt;= <span class="number">100</span> &amp;&amp; totalScore &lt; <span class="number">139</span>:</span><br><span class="line">result = <span class="string">&quot;爱幻想，思维较感性，以是否与自己投缘为标准来选择朋友。性格显得较孤傲，有时较急噪，有时优柔寡断。事业心较强，喜欢有创造性的工作，不喜欢按常规办事。性格倔强，言语犀利，不善于妥协。崇尚浪漫的爱情，但想法往往不切合实际。金钱欲望一般。&quot;</span></span><br><span class="line"><span class="keyword">case</span> totalScore &gt;= <span class="number">70</span> &amp;&amp; totalScore &lt; <span class="number">99</span>:</span><br><span class="line">result = <span class="string">&quot;好奇心强，喜欢冒险，人缘较好。事业心一般，对待工作，随遇而安，善于妥协。善于发现有趣的事情，但耐心较差，敢于冒险，但有时较胆小。渴望浪漫的爱情，但对婚姻的要求比较现实。不善理财。&quot;</span></span><br><span class="line"><span class="keyword">case</span> totalScore &gt;= <span class="number">40</span> &amp;&amp; totalScore &lt; <span class="number">69</span>:</span><br><span class="line">result = <span class="string">&quot;性情温良，重友谊，性格塌实稳重，但有时也比较狡黠。事业心一般，对本职工作能认真对待，但对自己专业以外事物没有太大兴趣，喜欢有规律的工作和生活，不喜欢冒险，家庭观念强，比较善于理财。&quot;</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">result = <span class="string">&quot;散漫，爱玩，富于幻想。聪明机灵，待人热情，爱交朋友，但对朋友没有严格的选择标准。事业心较差，更善于享受生活，意志力和耐心都较差，我行我素。有较好的异性缘，但对爱情不够坚持认真，容易妥协。没有财产观念。&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;totalScore&quot;</span>: totalScore,</span><br><span class="line"><span class="string">&quot;result&quot;</span>:     result,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置下路由</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group.POST(<span class="string">&quot;&quot;</span>, router.api.HandleAnswers)</span><br></pre></td></tr></table></figure><p>简单测试能得到结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;散漫，爱玩，富于幻想。聪明机灵，待人热情，爱交朋友，但对朋友没有严格的选择标准。事业心较差，更善于享受生活，意志力和耐心都较差，我行我素。有较好的异性缘，但对爱情不够坚持认真，容易妥协。没有财产观念。&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;totalScore&quot;</span><span class="punctuation">:</span> <span class="number">32</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>此时 API 就完成了，接着就是部署</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>如果按照其他语言，一般都是 <code>FROM</code> 一个官方的基础镜像，然后在上面再进行构建，这样就有第一种</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="keyword">FROM</span> golang:alpine</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这样出来的镜像是很大的，因为 golang 的 alpine 镜像本身就很大了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY           TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">golang               alpine    5dd973625d31   4 weeks ago      352MB</span><br></pre></td></tr></table></figure><p>而由于 go 本身特点，可以编译出来一个摆脱其他束缚的二进制文件，因此可以直接上 alpine</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> goquestionapi .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;/app/goquestionapi&quot;</span> ]</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build .</span><br><span class="line"></span><br><span class="line">docker build -t goquestionapi .</span><br></pre></td></tr></table></figure><p>这样 build 出来的程序有 13M，还可以再优化下，<code>-s</code> 可以去掉符号表，<code>-w</code> 可以去掉调试信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">&quot;-w -s&quot;</span> .</span><br></pre></td></tr></table></figure><p>这样 build 出来的程序只有 8.5M</p><p>跑下镜像测试下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -p 8080:8080 -e DB_SOURCE=<span class="string">&quot;postgresql://postgres:postgres@192.168.31.60:5432/postgres?sslmode=disable&amp;search_path=question&quot;</span> -d goquestionapi</span><br></pre></td></tr></table></figure><p>访问正常拿到数据</p><p>此时 docker 镜像大小为 14.4M</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY           TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">goquestionapi        latest    109360c6fafd   6 minutes ago    14.4MB</span><br></pre></td></tr></table></figure><p>上面说了，由于 go 自身的特性，如果没有额外的需求，还可以用 <code>scratch</code> 镜像，只是这样就不能 sh 进去容器，如果有访问外网的需求，也会报 SSL 证书错误，又或者时区的问题，因为里面确实什么都没有</p><p>这个 scratch 感觉更像是一个概念，不是实际可以摸到的东西，因为如果像其他镜像那样 pull 的话，会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull scratch</span><br><span class="line"></span><br><span class="line">Using default tag: latest</span><br><span class="line">Error response from daemon: <span class="string">&#x27;scratch&#x27;</span> is a reserved name</span><br></pre></td></tr></table></figure><p>这样 build 出来的镜像大小就又小了些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY           TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">goquestionapi        latest    7ac80b2a1ad0   3 seconds ago    8.86MB</span><br></pre></td></tr></table></figure><p>但是为了后续方便 sh 进去，还是习惯用 alpine，也不差那几兆硬盘</p><p>现如今都在谈 DevOps，谈云原生，一般 cicd 都在云端了，因此会有第二种，分阶段构建</p><p>这个时候就需要一个 go 环境，所以要利用 golang 镜像来做编译，完了再把编译出来的程序，再复制到基础的 alpine 镜像上</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:alpine AS builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">&quot;-w -s&quot;</span> .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/goquestionapi .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.env .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;/app/goquestionapi&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>此时编译正常，镜像小，也能正常运行</p><p><code>docker build</code> 的方式会产生很多 <code>&lt;none&gt;</code> 的没用的镜像，每次还要跑一大串命令，这有点不方便，因此可以用 <code>Docker Compose</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">goquestionapi:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">goquestionapi</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">goquestionapi</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GIN_MODE=release</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_SOURCE=postgresql://postgres:postgres@192.168.31.60:5432/postgres?sslmode=disable&amp;search_path=question</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LOG_LEVEL=info</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure><p>只要 <code>docker-compose build</code> 就可以把镜像 build 出来，并且可以灵活修改配置，命令不变，和 Makefile 的思想一样</p><p>还有一个好处就是没有 <code>&lt;none&gt;</code> 镜像，代码洁癖+强迫症患者表示很舒服</p><p>此时跑 <code>docker-compose up</code>，也能正常看到数据</p><p>以上是本地部署，线上大多是 Kubernetes 环境</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">goquestionapi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">goquestionapi</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">goquestionapi</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">goquestionapi</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">goquestionapi</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&quot;20Mi&quot;</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GIN_MODE</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">release</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DB_SOURCE</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">postgresql://postgres:postgres@postgres-postgresql.default.svc.cluster.local:5432/postgres?sslmode=disable&amp;search_path=question</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">goquestionapi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">goquestionapi</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">goquestionapi</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">goquestionapi</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/$2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">&quot;/api(/|$)(.*)&quot;</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">goquestionapi</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>由于我本地 K8s 环境是 <code>kind</code>，所以要把镜像 load 进去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kind load docker-image goquestionapi</span><br></pre></td></tr></table></figure><p>有两点需要注意，第一就是确保能拿到镜像，要么给个 tag 不用 latest 再通过加载镜像的方式，要么修改 imagePullPolicy 为 IfNotPresent 或者 Never，要么正确配置仓库地址，无论用 Docker Hub 还是自建</p><p>还有一点就是 postgres 要用 K8s 内部的连接，因为我的 postgres 是用 helm 安装的，所以可以通过 <code>helm status postgres</code> 查看到集群内部链接</p><p>apply 后访问 <code>http://localhost/api/questions</code>，也能正常看到数据</p><p>VSCode 或者 Goland 装好 Kubernetes 插件后，都能很方便直接 apply</p><p>VSCode 的话，配置写在一起会有提示无法对比，只能对比单个的，但是单个的话，已经 apply 了的配置会自动带上时间之类的额外的东西，对比起来也不是很直接，所以这里还是写在一起</p><p>至此，API 部分完</p><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="前期准备-1"><a href="#前期准备-1" class="headerlink" title="前期准备"></a>前期准备</h2><p>利用 <code>create-react-app</code> 来创建 React 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create react-app reactquestionweb</span><br></pre></td></tr></table></figure><p>接着集成第三方组件，<code>axios</code> 刚发布了 <code>1.0.0</code> 版本，会有兼容问题，因此还是用回老版本 <code>0.27.2</code> 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add antd</span><br><span class="line">yarn add axios@0.27.2</span><br><span class="line">yarn add use-axios-react</span><br></pre></td></tr></table></figure><h2 id="编写业务逻辑-1"><a href="#编写业务逻辑-1" class="headerlink" title="编写业务逻辑"></a>编写业务逻辑</h2><p>这里没什么好说的了，用函数式组件 + hook 完成网络请求、条件渲染，其他的就按照后端接口约定的参数提交</p><p>不会 CSS，所以没有太多华丽的辞藻显示在页面上</p><h2 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h2><p>部署好多人都喜欢用 node 的镜像然后用 npm start，但其实我这边习惯用 nginx，除了 <code>yarn build</code> 会有优化外，你都 build 出来静态文件了，还要 node 干啥</p><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:alpine AS builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yarn &amp;&amp; yarn build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/build /usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>compose.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">reactquestionweb:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">reactquestionweb</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">reactquestionweb</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure><p>k8s.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">reactquestionweb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">reactquestionweb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">reactquestionweb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">reactquestionweb</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">reactquestionweb</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&quot;20Mi&quot;</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">reactquestionweb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">reactquestionweb</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">reactquestionweb</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reactquestionweb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">reactquestionweb</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>然后访问 <code>http://localhost</code>，一切正常</p><p>到这里就完了，附上项目地址</p><p><a href="https://github.com/linweiyuan/goquestionapi">API</a></p><p><a href="https://github.com/linweiyuan/reactquestionweb">WEB</a></p><hr><p>纯属抛砖玉玉，如果有不同的意见，以你的为准</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/10/05/Go-React%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA</summary>
      
    
    
    
    <category term="程序设计" scheme="https://linweiyuan.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="Go" scheme="https://linweiyuan.github.io/tags/Go/"/>
    
    <category term="React" scheme="https://linweiyuan.github.io/tags/React/"/>
    
    <category term="sqlc" scheme="https://linweiyuan.github.io/tags/sqlc/"/>
    
    <category term="Postgres" scheme="https://linweiyuan.github.io/tags/Postgres/"/>
    
    <category term="Gin" scheme="https://linweiyuan.github.io/tags/Gin/"/>
    
    <category term="Ant Design" scheme="https://linweiyuan.github.io/tags/Ant-Design/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA Conf 2022</title>
    <link href="https://linweiyuan.github.io/2022/10/01/IntelliJ-IDEA-Conf-2022.html"/>
    <id>https://linweiyuan.github.io/2022/10/01/IntelliJ-IDEA-Conf-2022.html</id>
    <published>2022-10-01T05:09:00.000Z</published>
    <updated>2023-01-13T01:21:15.495Z</updated>
    
    <content type="html"><![CDATA[<p>看完了的 <code>IntelliJ IDEA Conf 2022 (day 1)</code> 和 <code>IntelliJ IDEA Conf 2022 (day 2)</code><br>写一下印象比较深的和观后感</p><h1 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h1><h2 id="Surviving-Open-Source-by-Donald-Raab"><a href="#Surviving-Open-Source-by-Donald-Raab" class="headerlink" title="Surviving Open Source, by Donald Raab"></a>Surviving Open Source, by Donald Raab</h2><p>介绍了这位老哥参与开源项目的心路历程</p><h2 id="Let’s-Set-Sail-With-Fleet-by-Vitaly-Bragilevsky"><a href="#Let’s-Set-Sail-With-Fleet-by-Vitaly-Bragilevsky" class="headerlink" title="Let’s Set Sail With Fleet!, by Vitaly Bragilevsky"></a>Let’s Set Sail With Fleet!, by Vitaly Bragilevsky</h2><p>（用了英文单引号，但是会自动变成了中文的，可能和配置有关）</p><p>这位老哥非常风趣幽默</p><p>在演示分布式计算器应用的加法功能时，<code>2 + 3 = -1</code>，<code>5 + 6 = -1</code>，评论区炸了锅，纷纷提出自己的解决方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">​Add is disabled</span><br><span class="line">...</span><br><span class="line">​addition uses subtract microservice</span><br><span class="line">...</span><br><span class="line">​you&#x27;re subtracting</span><br><span class="line">...</span><br><span class="line">​Looks like &#x27;+&#x27; is mapped to &#x27;-&#x27; button</span><br><span class="line">...</span><br><span class="line">​you have minus in your java implementation</span><br></pre></td></tr></table></figure><p>但其实是故意装作翻车的样子，节目效果罢了，实则是为了展示 Fleet 的远程协助功能（类似 IDEA 的 Code With Me）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">give them both an Oscar already</span><br></pre></td></tr></table></figure><p>最后 QA 环节，当问到 Fleet 是不是为了替换 IDEA 而弄出来的时候，主持人挑了挑眉，然后老哥吞了下口水，也比较搞笑，感觉有点像送命题</p><p>以下是他的原话（自动生成的字幕有部分错误，这里做了调整和删了部分 uh 语气词）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">I think Fleet is not designed to replace IntelliJ IDEA.</span><br><span class="line"></span><br><span class="line">So what I&#x27;ve showed you here is an IDE for working with polyglot projects with stuff like that, but I don&#x27;t think that when you have a project in Java or in Kotlin or in one language that Fleet will be enough for your experience.</span><br><span class="line"></span><br><span class="line">So I believe from my point of view, it&#x27;s not official statement from JetBrains by the way by no means.</span><br><span class="line"></span><br><span class="line">So what I feel, for me like when I have this dedicated project in one language, it&#x27;s great to use IDEA or maybe CLI with all that stuff and that very powerful IDE, but if you want to do something quickly, to edit something, to check something, then Fleet is great.</span><br><span class="line"></span><br><span class="line">So it&#x27;s not a replacement as I see, it&#x27;s a very nice addition.</span><br><span class="line"></span><br><span class="line">So that&#x27;s what I think.</span><br></pre></td></tr></table></figure><p>总的来说，Fleet 不是为了替换 IDEA 而弄出来的（求生欲拉满），只是作为一个补充，或者辅助工具</p><p>但是支持多语种，轻量级的特性，明眼人都看出来是对标 VSCode。。。</p><h2 id="Should-I-Upgrade-to-Java-17-by-Nikhil-Nanivadekar"><a href="#Should-I-Upgrade-to-Java-17-by-Nikhil-Nanivadekar" class="headerlink" title="Should I Upgrade to Java 17?, by Nikhil Nanivadekar"></a>Should I Upgrade to Java 17?, by Nikhil Nanivadekar</h2><p>主要是做了一些 Benchmark，JDK 8，JDK 11，JDK 17，JDK 17 的数据总体来说比低版本的好看，性能更强，内存占用更低</p><p>然后介绍了 JDK8 以后的新特性</p><p>比如 var 类型推断，switch 支持枚举和表达式，空指针异常打印（一个对象比如 <code>a.b().c().d()</code> 报 NPE，之前很难看出是 a 还是 b() 还是 c() 返回 null，这里会直接打印出来出现 null 的地方，方便 debug），文本块，Instanceof 增强，Record，密封类</p><p>但我感觉他的 PPT 里提到的 JDK 版本是错的。。。</p><p>总的来说，JDK 17 已经 GA 一年多了，JDK19 也 GA 了，明年 JDK 21 LTS 也会 GA，还没升级的赶快升级</p><p>话是这么说，陈年老码谁升谁知道，只要 Spring Boot 不出个 log4j 级别的漏洞，那大环境下 JDK 8 还会存在很久，这个是我感觉的，如果有不同的想法或意见，以你的为准</p><p>新项目是可以用的，如果没用 JDK 11，也可以直接上 JDK 17</p><p>Spring 6，Spring Boot 3，也要 JDK 17 起步</p><p>说句题外话，如果你用过 Kotlin，会发现这些所谓新特性，在 Kotlin 刚出道的时候，基本上是自带的，Java 现在已经慢慢变成 Kotlin 的模样 🐶</p><p>此外，用来对标 Go 协程的 Java 虚拟线程，其实人家 Kotlin 也早就有协程和 Channel 的实现了，在 Docker、云原生等的 buff 加持下，Java 逐渐失去了跨平台的优势，所以搞了个 Spring Native</p><p>感觉作为 20 多年的老大哥，Java 起了个大早，赶了个晚集，在面对后辈异军突起的时候，危机感也挺强的，还是个人观点，有不同的以你的为准</p><h2 id="Event-Streaming-and-Processing-Using-Apache-Pulsar-by-Mary-Grygleski"><a href="#Event-Streaming-and-Processing-Using-Apache-Pulsar-by-Mary-Grygleski" class="headerlink" title="Event Streaming and Processing Using Apache Pulsar, by Mary Grygleski"></a>Event Streaming and Processing Using Apache Pulsar, by Mary Grygleski</h2><p>没怎么了解过这个产品，没有对应的知识储备，讲得很清楚，听起来不是很明白，后面用到了再回头重看一遍</p><p>口音非常熟悉和亲切，不开字幕可以练下听力</p><h2 id="Kubernetes-Native-Java-by-Josh-Long"><a href="#Kubernetes-Native-Java-by-Josh-Long" class="headerlink" title="Kubernetes Native Java, by Josh Long"></a>Kubernetes Native Java, by Josh Long</h2><p>语速一如既往地快，不开字幕好多时候都跟不上</p><p>为什么要升级 JDK 17，他提供了一个很好的比喻（修复 bug 和去掉一些语气词）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">You know, for Spring Framework 6 as we mentioned, you can&#x27;t use Java 8 and Java 11 now, this is for good reason, they are terrible versions to use in production today, there is no situation which using Java 8 or 11, even ironically, is appropriate.</span><br><span class="line"></span><br><span class="line">Java 17 is technically superior to Java 8 in every conceivable way, it&#x27;s faster, more memory efficient, more observable, more secure, more robust, more syntax switch, more performant, more operations, friendly etc.</span><br><span class="line"></span><br><span class="line">It&#x27;s just a better piece of software in every conceivable way.</span><br><span class="line"></span><br><span class="line">It&#x27;s also morally superior to Java 8 in every conceivable way.</span><br><span class="line"></span><br><span class="line">You won&#x27;t like the look of despair and chagrin in your children&#x27;s faces when they find out that you&#x27;re using Java 8 in production.</span><br><span class="line"></span><br><span class="line">Don&#x27;t do it, be the change you want to see in the world, do the right thing.</span><br><span class="line"></span><br><span class="line">Java 17 is the right thing to do in 2022.</span><br><span class="line"></span><br><span class="line">My friends, I don&#x27;t think I need to go on about why Java 17 is an appropriate choice, or Java 17 or later is an appropriate choice, but just, if nothing else, just judging by the version number alone, I think it&#x27;s fair to say that Java 17 is more than twice as good as Java 8.</span><br></pre></td></tr></table></figure><p>重点在最后一句话，好像没毛病</p><p>接着讲了自定义 banner 的改动，Spring Boot 3 不支持图片格式的自动转换了，但是纯文字不影响，主要是用的人少，也出于性能考虑</p><p>后面主要是 Spring Native 相关，如何通过自定义 actuator 接口让 K8s 的 Liveness 和 Readiness 感知，从而使应用保持健康状态</p><p>Spring Native 我也尝试过，build 的时候 CPU 和内存全部跑满，花费一分多钟打包 Docker 镜像，仅仅是一个 Hello World，但是启动确实很快，内存占用也很低（和 Spring Boot Jar 相比），但是要在云原生这块打得过 Go，还要再下点功夫，Go WEB 应用的内存占用 + 静态编译 + Docker 打包一套组合拳确实很舒服，有不同意见以你的为准</p><p>最后介绍了下 Graphql，这个很早就听过但其实没实际用过，心血来潮时再来研究一番，只是第一感觉就是数据的权限粒度问题，别的用户会不会访问到不应该看到的数据，后面用到再详细学习</p><hr><h1 id="day-2"><a href="#day-2" class="headerlink" title="day 2"></a>day 2</h1><h2 id="Idiomatic-Kotlin-by-Anton-Arhipov"><a href="#Idiomatic-Kotlin-by-Anton-Arhipov" class="headerlink" title="Idiomatic Kotlin, by Anton Arhipov"></a>Idiomatic Kotlin, by Anton Arhipov</h2><p>主要是介绍了一些常见的用错的 Kotlin 写法，也不能说错，只是要怎样写才会更地道显得专业，好比英语母语者说东西喜欢中间加个 you know 或者 I mean，非母语者一般不会这样说，但是可能在口语中加上就会显得地道</p><p>作为有过多门编程经验的开发者，有时确实会先入为主，把之前用过的语言的写法用到新学语言上，能跑，但是就是显得不专业</p><p>好多编程语言要解决的问题一样，只是实现的过程不同，或者有自己的专有名词，比如做 WEB 开发，Spring 里的 AOP，在 Python 里面叫装饰器，在 Go 里叫中间件，不能说完全一致，只能说大部分要实现的功能都是相同的</p><p>做 Go 开发的时候，很容易将 Java 的面向对象的思维去做，遇到问题，什么都不说先创建一个类，但是 Go 不是完全面向对象，虽然可以实现面向对象，所以有时候开发前有必要好好过一遍官方文档，要怎么写才能更加 <code>&quot;Gopher&quot;</code></p><h2 id="Stories-of-Building-a-Remote-Development-IDE-by-Matt-Ellis"><a href="#Stories-of-Building-a-Remote-Development-IDE-by-Matt-Ellis" class="headerlink" title="Stories of Building a Remote Development IDE, by Matt Ellis"></a>Stories of Building a Remote Development IDE, by Matt Ellis</h2><p>主要介绍了远程开发和实现这个功能的心路历程</p><p>这个远程开发是代码、系统资源等等全在云端，演示里是用 AWS，国外企业用 AWS 较多，目前我也还没尝试过，国内一兆小水管能干啥？</p><p>远程开发会带来一个问题，调试的时候如何访问 localhost？解决方法是在服务器上进行端口转发，通过访问服务器的相关端口</p><p>还有介绍 Code With Me 的功能</p><p>这个实现远程开发的功能的架构，有点像 MMORPG</p><h2 id="Evolving-JUnit-5-by-Marc-Philipp"><a href="#Evolving-JUnit-5-by-Marc-Philipp" class="headerlink" title="Evolving JUnit 5, by Marc Philipp"></a>Evolving JUnit 5, by Marc Philipp</h2><p>老实说，对 JUnit 的研究不多，所以对于视频的东西好多都是非常陌生，留下的印象也不深（是我个人问题，视频演示很好）</p><h2 id="Project-Loom-Revolution-in-Concurrency-or-Obscure-Implementation-Detail-by-Tomasz-Nurkiewicz"><a href="#Project-Loom-Revolution-in-Concurrency-or-Obscure-Implementation-Detail-by-Tomasz-Nurkiewicz" class="headerlink" title="Project Loom: Revolution in Concurrency or Obscure Implementation Detail?, by Tomasz Nurkiewicz"></a>Project Loom: Revolution in Concurrency or Obscure Implementation Detail?, by Tomasz Nurkiewicz</h2><p>其实很多概念都和其他语言的协程相似，Java 里叫虚拟线程，是一个开发中的功能，需要加参数才能尝试，JDK 19</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java --enable-preview</span><br></pre></td></tr></table></figure><p>从用户线程讲到内核线程，在 Java 的早期版本中，JVM 自己实现了一套调度器，那时计算机还不是非常普及，一般是单核 CPU，但 Java 也能实现多线程的效果，这种是多对一的模型，也叫绿色线程，绿色线程并不依赖底层的操作系统，线程的调度都发生在用户空间</p><p>在多核的环境下，这种多对一的模型就不能发挥优势了，从实现的效果来说，绿色线程实现的是并发不是并行，因此出现第二种模型</p><p>多对多模型，一堆用户线程对应一堆内核线程，也是由 JVM 进行调度，用得不多</p><p>随着 JVM 和操作系统的日渐成熟以及计算机的发展，最后出现的是一对一模型，一个用户线程对应一个内核线程，而在一般情况下，Linux 系统会将线程看作进程（其他系统不是），所以线程的创建是比较耗费系统资源的（默认 1M）</p><p>Java 里的虚拟线程，主要由三部分组成：</p><ul><li>Virtual thread：非常轻量的用户线程（相当于其他语言的协程、或者 Task）</li><li>Carrier thread：JDK 19 前的 Java 线程，对应着一条内核线程，虚拟线程 pin 在这里进行处理</li><li>Continuation：一堆可以被暂停的代码，当在方法中暂停，再执行，不会从头执行方法，而是在暂停处接着执行（PPT 原文：A piece of code that can be paused, at almost no cost）</li></ul><p>有种 IO 多路复用的感觉</p><p>虚拟线程和普通线程的用法基本一样，但是线程池可以免了，因为可以创建非常多的虚拟线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.startVirtualThread(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread</span><br><span class="line">    .ofVirtual()</span><br><span class="line">    .name(<span class="string">&quot;MyThread&quot;</span>)</span><br><span class="line">    .unstarted(() -&gt; task());</span><br><span class="line"></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">es</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadFactory</span> <span class="variable">factory</span> <span class="operator">=</span> Thread</span><br><span class="line">    .ofVirtual()</span><br><span class="line">    .factory();</span><br></pre></td></tr></table></figure><h2 id="JavaFX-for-Mobile-Development-by-Gail-Anderson"><a href="#JavaFX-for-Mobile-Development-by-Gail-Anderson" class="headerlink" title="JavaFX for Mobile Development, by Gail Anderson"></a>JavaFX for Mobile Development, by Gail Anderson</h2><p>主要介绍 JavaFX 和 Gluon，但是已经偏了 WEB 这条路了，所以没有太认真听</p><p>刚学 Java 时倒是做过一些 GUI 应用，也写过 Android，最后还是回到了 WEB</p><p>找机会重新看一遍</p><hr><p>最后附上原视频（科学）：</p><h1 id="day-1"><a href="#day-1" class="headerlink" title="day 1"></a>day 1</h1><p>Agenda:</p><p>0:00 – Countdown<br>0:53 – Introduction<br>4:35 – Keynote: Surviving Open Source, by Donald Raab<br>1:01:27 – Let’s Set Sail With Fleet!, by Vitaly Bragilevsky<br>1:59:46 – Should I Upgrade to Java 17?, by Nikhil Nanivadekar<br>3:01:06 – Event Streaming and Processing Using Apache Pulsar, by Mary Grygleski<br>4:00:19 – Kubernetes Native Java, by Josh Long</p><div class="video"><iframe width="560" height="315" src="https://www.youtube.com/embed/vmS9vNbta-w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div><h1 id="day-2-1"><a href="#day-2-1" class="headerlink" title="day 2"></a>day 2</h1><p>Agenda:</p><p>0:00 – Countdown<br>0:53 – Introduction<br>5:49 – Idiomatic Kotlin, by Anton Arhipov<br>1:03:12 – Wish You Were Here: Stories of Building a Remote Development IDE, by Matt Ellis<br>2:01:22 – Evolving JUnit 5, by Marc Philipp<br>3:01:18 – Project Loom: Revolution in Concurrency or Obscure Implementation Detail?, by Tomasz Nurkiewicz<br>4:02:37 – JavaFX for Mobile Development, by Gail Anderson</p><div class="video"><iframe width="560" height="315" src="https://www.youtube.com/embed/-8epeIFdKWo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看完了的 &lt;code&gt;IntelliJ IDEA Conf 2022 (day 1)&lt;/code&gt; 和 &lt;code&gt;IntelliJ IDEA Conf 2022 (day 2)&lt;/code&gt;&lt;br&gt;写一下印象比较深的和观后感&lt;/p&gt;
&lt;h1 id=&quot;day1&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="社区活动" scheme="https://linweiyuan.github.io/categories/%E7%A4%BE%E5%8C%BA%E6%B4%BB%E5%8A%A8/"/>
    
    
    <category term="Java" scheme="https://linweiyuan.github.io/tags/Java/"/>
    
    <category term="Kotlin" scheme="https://linweiyuan.github.io/tags/Kotlin/"/>
    
    <category term="IntelliJ IDEA Conf" scheme="https://linweiyuan.github.io/tags/IntelliJ-IDEA-Conf/"/>
    
  </entry>
  
  <entry>
    <title>Go实现Pod后台端口转发</title>
    <link href="https://linweiyuan.github.io/2022/09/27/Go%E5%AE%9E%E7%8E%B0Pod%E5%90%8E%E5%8F%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91.html"/>
    <id>https://linweiyuan.github.io/2022/09/27/Go%E5%AE%9E%E7%8E%B0Pod%E5%90%8E%E5%8F%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91.html</id>
    <published>2022-09-27T18:39:50.000Z</published>
    <updated>2023-01-13T01:21:15.495Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub: <a href="https://github.com/linweiyuan/goportforwarder">https://github.com/linweiyuan/goportforwarder</a></p><p>在Kubernetes in docker (kind) 的环境下，没有找到好用的支持后台运行的端口转发方案，自己实现了个简单的</p><div class="video"><iframe src="//player.bilibili.com/player.html?aid=303421894&bvid=BV1PP411n7qN&cid=845282247&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/linweiyuan/goportforwarder&quot;&gt;https://github.com/linweiyuan/goportforwarder&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在Kubernetes in d</summary>
      
    
    
    
    <category term="操作系统" scheme="https://linweiyuan.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Kubernetes" scheme="https://linweiyuan.github.io/tags/Kubernetes/"/>
    
    <category term="Golang" scheme="https://linweiyuan.github.io/tags/Golang/"/>
    
    <category term="Pod" scheme="https://linweiyuan.github.io/tags/Pod/"/>
    
  </entry>
  
  <entry>
    <title>Ingress配置pgAdmin需要注意的问题</title>
    <link href="https://linweiyuan.github.io/2022/09/23/Ingress%E9%85%8D%E7%BD%AEpgAdmin%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <id>https://linweiyuan.github.io/2022/09/23/Ingress%E9%85%8D%E7%BD%AEpgAdmin%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98.html</id>
    <published>2022-09-23T17:32:34.000Z</published>
    <updated>2023-01-13T01:21:15.495Z</updated>
    
    <content type="html"><![CDATA[<p>当使用 Docker 或者 Docker Compose 部署 pgAdmin 来方便本地开发访问使用的时候，是不需要额外注意的，因为通常都是直接暴露端口出去</p><p>但是基于 K8s 环境下部署的时候，需要稍微注意一点地方</p><h1 id="K8s-集群准备"><a href="#K8s-集群准备" class="headerlink" title="K8s 集群准备"></a>K8s 集群准备</h1><p>K8s 的搭建方式多种多样，比如 k3d、kubeadm、kind 等，由于多年之前有裸装 Oracle 把系统搞烂的经历，对于一些软件的安装，我这边是比较谨慎的。况且后面接触了容器，能在里面跑就里面跑，什么两倍读写的问题不考虑，所以我使用的是 <code>kind</code> 来搭建集群</p><p>为了服务在容器外能访问，kind 创建 K8s 集群的时候还需要一些额外的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Cluster</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kind.x-k8s.io/v1alpha4</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">apiServerAddress:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">apiServerPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">control-plane</span></span><br><span class="line">    <span class="attr">kubeadmConfigPatches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        kind: InitConfiguration</span></span><br><span class="line"><span class="string">        nodeRegistration:</span></span><br><span class="line"><span class="string">          kubeletExtraArgs:</span></span><br><span class="line"><span class="string">            node-labels: &quot;ingress-ready=true&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="attr">extraPortMappings:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">hostPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">        <span class="attr">hostPort:</span> <span class="number">443</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><h1 id="Ingress-Controller-准备"><a href="#Ingress-Controller-准备" class="headerlink" title="Ingress Controller 准备"></a>Ingress Controller 准备</h1><p>K8s 暴露服务的方式也多种多样，比如 NodePort、LoadBalancer、Ingress。由于 kind 的特殊性，整个 K8s 集群都跑在容器中，所以就算 NodePort 也是容器里的端口，所以这次主要讨论 Ingress，使用的是 <code>Nginx</code></p><p>使用 Ingress，首先需要在集群中安装一个 Ingress Controller，然后通过 Ingress 来进行一些配置，当 apply 的时候，Ingress Controller 会自动更新 nginx.conf 并进行 reload</p><p>如果之前配置过 Nginx，其实类比起来是很像的，一个 Ingress Controller 相当于一个 Nginx，一个 Ingress 则好比 Nginx 的配置文件</p><p>当 Ingress Controller 准备好后，会以 NodePort 的方式暴露 80 和 443 端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME                                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx-controller             NodePort    10.96.30.54    &lt;none&gt;        80:30860/TCP，443:31875/TCP   3d</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="pgAdmin-准备"><a href="#pgAdmin-准备" class="headerlink" title="pgAdmin 准备"></a>pgAdmin 准备</h1><p>为了简单起见，使用 <code>helm</code> 来安装 pgAdmin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install pgadmin runix/pgadmin4 --<span class="built_in">set</span> env.email=root@linweiyuan.com --<span class="built_in">set</span> env.password=toor</span><br></pre></td></tr></table></figure><h1 id="Ingress-准备"><a href="#Ingress-准备" class="headerlink" title="Ingress 准备"></a>Ingress 准备</h1><p>配置好 Ingress 规则，因为想做到访问不同的 path 路由到不同的服务，所以这里用 &#x2F;pgAdmin 来设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pgadmin-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">&quot;/pgAdmin&quot;</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">pgadmin-pgadmin4</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>但是此时访问 <a href="http://localhost/pgAdmin">http://localhost/pgAdmin</a> 的时候，会返回 404</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Not Found The requested URL was not found on the server. If you entered the URL</span><br><span class="line">manually please check your spelling and try again.</span><br></pre></td></tr></table></figure><h1 id="pgAdmin-访问解决"><a href="#pgAdmin-访问解决" class="headerlink" title="pgAdmin 访问解决"></a>pgAdmin 访问解决</h1><p>查看<a href="https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html#http-via-nginx">官方文档</a>，会发现这么一句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If you wish to host pgAdmin under a subdirectory rather than on the root of the server, you must specify the location and set the X-Script-Name header which tells the pgAdmin container how to rewrite paths</span><br></pre></td></tr></table></figure><p>就是说 Nginx 的配置里要加 <code>X-Script-Name</code>，但是在 K8s 里要怎么加？</p><p>前面提过，其实无非是修改 Ingress 的配置，此时如果进入 Ingress Controller 的 pod 中查看配置文件，会发现当前配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bash-5.1$ hostname</span><br><span class="line">ingress-nginx-controller-65b4b4df7d-rhd2k</span><br><span class="line">bash-5.1$ <span class="built_in">cat</span> -n nginx.conf | grep pgAdmin</span><br><span class="line">   297location /pgAdmin/ &#123;</span><br><span class="line">   303<span class="built_in">set</span> <span class="variable">$location_path</span>  <span class="string">&quot;/pgAdmin&quot;</span>;</span><br><span class="line">   415location = /pgAdmin &#123;</span><br><span class="line">   421<span class="built_in">set</span> <span class="variable">$location_path</span>  <span class="string">&quot;/pgAdmin&quot;</span>;</span><br></pre></td></tr></table></figure><p>而根据 pgAdmin 官方文档的指引，需要把配置加到 location 下，回头查看 <a href="https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md#configuration-snippet">K8s 官方文档</a>，发现其实是配置 <code>nginx.ingress.kubernetes.io/configuration-snippet</code></p><p>因此配置文件进行修改，完整配置文件如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pgadmin-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/configuration-snippet:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      proxy_set_header X-Script-Name /pgAdmin;</span></span><br><span class="line"><span class="string"></span><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">&quot;/pgAdmin&quot;</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">pgadmin-pgadmin4</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>再 apply</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kaf pgadmin-ingress.yaml</span><br><span class="line">ingress.networking.k8s.io/pgadmin-ingress configured</span><br></pre></td></tr></table></figure><p>再查看 nginx.conf，已经生效了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bash-5.1$ <span class="built_in">cat</span> -n nginx.conf | grep pgAdmin</span><br><span class="line">   297location /pgAdmin/ &#123;</span><br><span class="line">   303<span class="built_in">set</span> <span class="variable">$location_path</span>  <span class="string">&quot;/pgAdmin&quot;</span>;</span><br><span class="line">   409proxy_set_header X-Script-Name /pgAdmin;</span><br><span class="line">   417location = /pgAdmin &#123;</span><br><span class="line">   423<span class="built_in">set</span> <span class="variable">$location_path</span>  <span class="string">&quot;/pgAdmin&quot;</span>;</span><br><span class="line">   529proxy_set_header X-Script-Name /pgAdmin;</span><br></pre></td></tr></table></figure><p>此时再访问 <a href="http://localhost/pgAdmin">http://localhost/pgAdmin</a></p><p>会自动跳转 <a href="http://localhost/pgAdmin/login?next=/pgAdmin/">http://localhost/pgAdmin/login?next=%2FpgAdmin%2F</a></p><p>用上面 helm 设置的用户名和密码即可登录进去，问题解决</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当使用 Docker 或者 Docker Compose 部署 pgAdmin 来方便本地开发访问使用的时候，是不需要额外注意的，因为通常都是直接暴露端口出去&lt;/p&gt;
&lt;p&gt;但是基于 K8s 环境下部署的时候，需要稍微注意一点地方&lt;/p&gt;
&lt;h1 id=&quot;K8s-集群准备&quot;</summary>
      
    
    
    
    <category term="容器技术" scheme="https://linweiyuan.github.io/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Kubernetes" scheme="https://linweiyuan.github.io/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes/"/>
    
    
    <category term="Kubernetes" scheme="https://linweiyuan.github.io/tags/Kubernetes/"/>
    
    <category term="pgAdmin" scheme="https://linweiyuan.github.io/tags/pgAdmin/"/>
    
    <category term="Ingress" scheme="https://linweiyuan.github.io/tags/Ingress/"/>
    
  </entry>
  
  <entry>
    <title>利用 Github Actions 实现代码提交自动部署更新 Kubernetes</title>
    <link href="https://linweiyuan.github.io/2022/09/13/%E5%88%A9%E7%94%A8GithubActions%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E6%9B%B4%E6%96%B0Kubernetes.html"/>
    <id>https://linweiyuan.github.io/2022/09/13/%E5%88%A9%E7%94%A8GithubActions%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E6%9B%B4%E6%96%B0Kubernetes.html</id>
    <published>2022-09-13T04:31:35.000Z</published>
    <updated>2023-01-13T01:21:15.499Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub: <a href="https://github.com/linweiyuan/github-actions-tests">https://github.com/linweiyuan/github-actions-tests</a></p><p>可以换掉大部分 Jenkins + webhooks 的场景</p><div class="video"><iframe src="//player.bilibili.com/player.html?aid=515899777&bvid=BV1Ag411e7DG&cid=842773470&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/linweiyuan/github-actions-tests&quot;&gt;https://github.com/linweiyuan/github-actions-tests&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以换掉大部</summary>
      
    
    
    
    <category term="Github Actions" scheme="https://linweiyuan.github.io/categories/Github-Actions/"/>
    
    
    <category term="Kubernetes" scheme="https://linweiyuan.github.io/tags/Kubernetes/"/>
    
    <category term="Golang" scheme="https://linweiyuan.github.io/tags/Golang/"/>
    
    <category term="Github Actions" scheme="https://linweiyuan.github.io/tags/Github-Actions/"/>
    
  </entry>
  
  <entry>
    <title>Go 实现 i3bar 显示歌词</title>
    <link href="https://linweiyuan.github.io/2022/09/06/Go%E5%AE%9E%E7%8E%B0i3bar%E6%98%BE%E7%A4%BA%E6%AD%8C%E8%AF%8D.html"/>
    <id>https://linweiyuan.github.io/2022/09/06/Go%E5%AE%9E%E7%8E%B0i3bar%E6%98%BE%E7%A4%BA%E6%AD%8C%E8%AF%8D.html</id>
    <published>2022-09-06T04:31:35.000Z</published>
    <updated>2023-01-13T01:21:15.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于-Go-实现的-i3bar-歌词显示程序"><a href="#基于-Go-实现的-i3bar-歌词显示程序" class="headerlink" title="基于 Go 实现的 i3bar 歌词显示程序"></a>基于 Go 实现的 i3bar 歌词显示程序</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/linweiyuan/goi3barlyric.git</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> build</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bar &#123;</span><br><span class="line">    status_command goi3barlyric</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>限制较多，实验性质</p><div class="video"><iframe src="//player.bilibili.com/player.html?aid=473404363&bvid=BV1PT411M7H5&cid=842777138&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于-Go-实现的-i3bar-歌词显示程序&quot;&gt;&lt;a href=&quot;#基于-Go-实现的-i3bar-歌词显示程序&quot; class=&quot;headerlink&quot; title=&quot;基于 Go 实现的 i3bar 歌词显示程序&quot;&gt;&lt;/a&gt;基于 Go 实现的 i3bar 歌词显示</summary>
      
    
    
    
    <category term="操作系统" scheme="https://linweiyuan.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Golang" scheme="https://linweiyuan.github.io/tags/Golang/"/>
    
    <category term="i3" scheme="https://linweiyuan.github.io/tags/i3/"/>
    
    <category term="i3bar" scheme="https://linweiyuan.github.io/tags/i3bar/"/>
    
  </entry>
  
  <entry>
    <title>Docker 常用服务</title>
    <link href="https://linweiyuan.github.io/2022/07/26/Docker-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1.html"/>
    <id>https://linweiyuan.github.io/2022/07/26/Docker-%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1.html</id>
    <published>2022-07-26T18:42:48.000Z</published>
    <updated>2023-01-13T01:21:15.495Z</updated>
    
    <content type="html"><![CDATA[<p>整理了下常用的 <code>Docker</code> 服务： <a href="https://github.com/linweiyuan/docker-services">https://github.com/linweiyuan/docker-services</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;整理了下常用的 &lt;code&gt;Docker&lt;/code&gt; 服务： &lt;a href=&quot;https://github.com/linweiyuan/docker-services&quot;&gt;https://github.com/linweiyuan/docker-services&lt;/a&gt;</summary>
      
    
    
    
    <category term="容器技术" scheme="https://linweiyuan.github.io/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Docker" scheme="https://linweiyuan.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 使用国内镜像源时遇到的坑</title>
    <link href="https://linweiyuan.github.io/2022/07/25/Docker-%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91.html"/>
    <id>https://linweiyuan.github.io/2022/07/25/Docker-%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91.html</id>
    <published>2022-07-25T02:50:47.000Z</published>
    <updated>2023-01-13T01:21:15.495Z</updated>
    
    <content type="html"><![CDATA[<p>详见：<a href="https://github.com/ustclug/discussions/issues/396">https://github.com/ustclug/discussions/issues/396</a></p><p>“故从 2020 年 4 月起，从科大校外对 Docker Hub 镜像缓存的访问会被 302 重定向至其他国内 Docker Hub 镜像源”</p><p>可以看到是重定向到阿里云</p><p><a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a> -&gt; <a href="https://ustc-edu-cn.mirror.aliyuncs.com/">https://ustc-edu-cn.mirror.aliyuncs.com</a></p><p>但是校外访问这个仓库已经是旧的了</p><p>替代品</p><ul><li>直连</li><li>阿里云（广州或杭州，或自己账号）：<a href="https://registry.cn-guangzhou.aliyuncs.com/">https://registry.cn-guangzhou.aliyuncs.com</a></li><li>网易（容易连着连着自动断开）：<a href="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;详见：&lt;a href=&quot;https://github.com/ustclug/discussions/issues/396&quot;&gt;https://github.com/ustclug/discussions/issues/396&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“故从 2020 年 4 </summary>
      
    
    
    
    <category term="容器技术" scheme="https://linweiyuan.github.io/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Docker" scheme="https://linweiyuan.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>30分钟从0到1搭建一个最基础的Rancher</title>
    <link href="https://linweiyuan.github.io/2022/06/04/30%E5%88%86%E9%92%9F%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84Rancher.html"/>
    <id>https://linweiyuan.github.io/2022/06/04/30%E5%88%86%E9%92%9F%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84Rancher.html</id>
    <published>2022-06-04T04:31:35.000Z</published>
    <updated>2023-01-13T01:21:15.491Z</updated>
    
    <content type="html"><![CDATA[<p>宿主机 Arch Linux，cgroup v2, 安装会报错，解决方案 -&gt; systemd.unified_cgroup_hierarchy&#x3D;0</p><p>简单起见，基于虚拟机 CentOS 7.9，一主两从<br>rancher 管理机：192.168.31.240<br>k8s 一主节点：192.168.31.250<br>k8s 两从节点：192.168.31.251, 192.168.31.252</p><p>docker 私有仓库： distribution&#x2F;registry</p><p>内网 dns：dnsmasq</p><div class="video"><iframe src="//player.bilibili.com/player.html?aid=560999944&bvid=BV1Fe4y1B7Bf&cid=842560164&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;宿主机 Arch Linux，cgroup v2, 安装会报错，解决方案 -&amp;gt; systemd.unified_cgroup_hierarchy&amp;#x3D;0&lt;/p&gt;
&lt;p&gt;简单起见，基于虚拟机 CentOS 7.9，一主两从&lt;br&gt;rancher 管理机：192.1</summary>
      
    
    
    
    <category term="操作系统" scheme="https://linweiyuan.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Arch Linux" scheme="https://linweiyuan.github.io/tags/Arch-Linux/"/>
    
    <category term="Rancher" scheme="https://linweiyuan.github.io/tags/Rancher/"/>
    
    <category term="Kubernetes" scheme="https://linweiyuan.github.io/tags/Kubernetes/"/>
    
    <category term="CentOS" scheme="https://linweiyuan.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>分布式相关理论</title>
    <link href="https://linweiyuan.github.io/2022/05/22/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%B8%E5%85%B3%E7%90%86%E8%AE%BA.html"/>
    <id>https://linweiyuan.github.io/2022/05/22/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%B8%E5%85%B3%E7%90%86%E8%AE%BA.html</id>
    <published>2022-05-22T09:42:15.000Z</published>
    <updated>2023-01-13T01:21:15.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h1><ul><li>C：Consistency（一致性）<br>访问分布式系统的任何一个节点，得到的数据都是一样的（需要进行数据同步）</li><li>A：Availability（可用性）<br>访问分布式系统中的任何一个健康节点，必须能得到响应，而不是超时或拒绝（需要确保网络畅通）</li><li>P：Partition tolerance（分区容错性）<ul><li>分区：分布式系统中部分节点由于发生网络故障或其他原因导致和其他节点失去连接，形成独立分区</li><li>容错：出现独立分区时，整个系统也要持续对外提供服务</li></ul></li></ul><p>在分布式系统中，网络是一个不确定的因素，但是发生网络故障的时候，服务还要持续对外提供服务，所以分区容错性不可避免</p><p>假如网络不佳，导致有节点故障掉线，此时接收到新的数据变更时：</p><ul><li>如果要保证可用性，就不能等待网络恢复，那节点之间就会出现数据不一致的情况，因为数据同步需要时间</li><li>如果要保证一致性，就必须等待网络恢复，完成数据同步后，整个集群才对外提供服务，在这个数据同步的过程中，服务暂时不可用</li></ul><p>也就是说，在 P 一定出现的情况下，A 和 C 之间只能实现一个，要么 AP，要么 CP</p><h1 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h1><p>BASE 是对 CAP 的一种扩展</p><ul><li>Basically Available（基本可用）：当分布式系统出现故障时，允许丢失部分可用性，保证核心业务可用</li><li>Soft State（软状态）：在一定的时间内，允许出现数据不一致的状态</li><li>Eventually Consistent（最终一致性）：当软状态结束后，确保数据最终是一致的</li></ul><hr><p>相关链接：<a href="https://linweiyuan.github.io/2022/11/05/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9B%B8%E5%85%B3%E5%AE%9E%E8%B7%B5.html">分布式相关实践</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CAP&quot;&gt;&lt;a href=&quot;#CAP&quot; class=&quot;headerlink&quot; title=&quot;CAP&quot;&gt;&lt;/a&gt;CAP&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;C：Consistency（一致性）&lt;br&gt;访问分布式系统的任何一个节点，得到的数据都是一样的（需要进行数据同步）&lt;/l</summary>
      
    
    
    
    <category term="架构设计" scheme="https://linweiyuan.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="CAP" scheme="https://linweiyuan.github.io/tags/CAP/"/>
    
    <category term="BASE" scheme="https://linweiyuan.github.io/tags/BASE/"/>
    
  </entry>
  
  <entry>
    <title>Java高并发核心编程卷1读书笔记</title>
    <link href="https://linweiyuan.github.io/2022/05/01/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E5%8D%B71%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html"/>
    <id>https://linweiyuan.github.io/2022/05/01/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E5%8D%B71%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html</id>
    <published>2022-05-01T04:13:20.000Z</published>
    <updated>2023-01-13T01:21:15.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2><ul><li>Channel</li><li>Reactor</li><li>Handler</li><li>Pipeline（双向链表）</li><li>EventLoopGroup</li><li>parentGroup: 负责新连接的监听和接收</li><li>childGroup：负责 IO 事件的轮询和分发<br>如果不分开 parent 和 child,则会带来一个风险：新连接的接收被更加耗时的数据传输或业务处理所阻塞</li><li>ChannelOption</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>API 使用起来相对简单，降低了开发门槛</li><li>对多种主流协议都有很好的支持（编解码功能）</li><li>支持自定义配置，通过 ChannelHandler 可以灵活地扩展通信框架</li><li>其他业界主流的 NIO 框架相比，Netty 的综合性能最优（谁出书都会说自己的好）</li><li>成熟稳定，Netty 修复了在 JDK NIO 中所有已发现的 bug（我也不知道有什么 bug）</li><li>有活跃的社区，版本迭代周期短，bug 修复及时</li></ul><h1 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h1><p>核心优势就是解决了分布式环境的数据一致性问题，每时每刻访问 ZooKeeper 的树结构时，返回的数据都是一致的，不会引起脏读、幻读、不可重复读</p><h1 id="脏读、幻读、不可重复读"><a href="#脏读、幻读、不可重复读" class="headerlink" title="脏读、幻读、不可重复读"></a>脏读、幻读、不可重复读</h1><ul><li>脏读：一个事务中访问到了另一个事务未提交的数据</li><li>幻读：当两个完全相同的查询执行时，两次返回的结果集不一样，原因另一个事务新增或删除了第一个事务的结果集中的数据</li><li>不可重复读：在一个事务内根据同一个条件对数据进行多次查询，返回的结果不一致，原因是其他事务对数据进行了修改</li></ul><p>不可重复读和幻读的区别：</p><p>不可重复读关心的是记录的更新操作，对同样的记录，再次读取数据发生变化</p><p>幻读关注的是记录的增删操作，条数发生了变化</p><h1 id="高并发环境下的接入层"><a href="#高并发环境下的接入层" class="headerlink" title="高并发环境下的接入层"></a>高并发环境下的接入层</h1><p>网关不外乎完成以下工作：</p><ul><li>鉴权</li><li>限流</li><li>反向代理</li><li>负载均衡</li></ul><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>将内存划分为两部分，内核模块运行在内核空间，对应的进程处于内核态；用户程序运行在用户空间，对应的进程处于用户态</p><p>IO 读写：</p><p>上层应用通过操作系统的 read 系统调用，把数据从内核缓冲区复制到应用程序的进程缓冲区，通过操作系统的 write 系统调用，把数据从应用程序的进程缓冲区复制到操作系统的内核缓冲区</p><p>那么为什么要设置缓冲区呢？</p><p>是为了减少设备之间的频繁物理交换，因为外部物理设备与内存和 CPU 相比，有着非常大的差距</p><h1 id="四种主要的-IO-模型"><a href="#四种主要的-IO-模型" class="headerlink" title="四种主要的 IO 模型"></a>四种主要的 IO 模型</h1><p>阻塞 IO 指的是，需要内核 IO 操作彻底完成后，才返回用户空间执行用户程序的操作指令，非阻塞则无需等待</p><p>同步指的是用户空间（进程或线程）是主动发起 IO 请求的一方，系统内核是被动接收方；异步 IO 则反过来</p><ul><li>同步阻塞 IO：用户空间主动发起，需要等待内核 IO 操作彻底完成后，才返回到用户空间的 IO 操作<ul><li>优点：应用程序开发非常简单，在阻塞等待数据的过程中，用户线程挂起，基本不会占用 CPU 资源</li><li>缺点：一般情况下会为每个连接配备一个独立的线程，高并发场景下，需要大量线程，内存和线程切换开销会非常大</li></ul></li><li>同步非阻塞 IO：用户空间发起，不需要等待内核 IO 操作彻底完成，就可以立即返回用户空间去执行后续的指令（这个也叫 NIO，但是和 Java 里面的 NIO 有区别，Java 里的 NIO 指的是 NewIO，用的是 IO 多路复用模型），特点是需要不断进行轮询<ul><li>优点：线程不会阻塞，实时性较好</li><li>缺点：需要不断轮询，占用 CPU 资源，效率低下</li></ul></li><li>IO 多路复用：在 Linux 系统中，IO 多路复用的系统调用为 select&#x2F;epoll，通过该系统调用，一个用户进程（或线程）可以监视多个文件描述符，一旦某个文件描述符就绪（一般是指内核缓冲区可读&#x2F;可写），内核就能够将文件描述符的就绪状态返回给用户进程（或线程），用户空间就可以根据文件描述符的就绪状态进行对应的 IO 系统调用（Reactor）<ul><li>优点：一个选择器查询线程可以同时处理成千上万的网络连接，不必创建大量的线程</li><li>缺点：select&#x2F;epoll 系统调用是阻塞的，属于同步 IO</li></ul></li><li>异步 IO：指的是用户空间的线程变成被动接收者，而内核空间成为主动调用者；用户线程通过系统调用向内核注册某个 IO 操作，内核在这个 IO 操作完成后通知用户程序，用户程序执行后续的业务操作（回调）<ul><li>优点：非阻塞</li><li>缺点：应用程序仅需要进行事件的注册和接收，其余的工作都留给了操作系统，也就是需要底层内核提供支持</li></ul></li></ul><h1 id="连接极限值"><a href="#连接极限值" class="headerlink" title="连接极限值"></a>连接极限值</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n 1000000（默认 1024）</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -SHn（S 软性极限值，超过警告；H 硬性极限值，超过报错）</span><br></pre></td></tr></table></figure><p>如何彻底解除限制？</p><p>编辑文件 <code>/etc/security/limits.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soft nofile 1000000</span><br><span class="line">hard nofile 1000000</span><br></pre></td></tr></table></figure><h1 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h1><h2 id="基本组件-1"><a href="#基本组件-1" class="headerlink" title="基本组件"></a>基本组件</h2><ul><li>Channel</li><li>Buffer</li><li>Selector</li></ul><h2 id="OIO-和-NIO-的区别"><a href="#OIO-和-NIO-的区别" class="headerlink" title="OIO 和 NIO 的区别"></a>OIO 和 NIO 的区别</h2><ul><li>OIO（Old IO） 面向流，NIO（New IO）面向缓存区</li><li>OIO 是阻塞的，NIO 非阻塞</li><li>OIO 没有 Selector 概念，NIO 有</li></ul><h1 id="NIO-Buffer"><a href="#NIO-Buffer" class="headerlink" title="NIO Buffer"></a>NIO Buffer</h1><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><p>allocate(int capacity)： 默认是写模式，从数组下标 0 开始，长度限制是 capacity</p></li><li><p>put(int i)：写 i 进数组里，如果超过长度，则抛出 BufferOverflowException（可使用 remaining() 来判断剩余可写长度；如果是读模式，则抛出 ReadOnlyBufferException（可使用 isReadOnly() 来判断是否可写）</p></li><li><p>filp()：读写模式转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Buffer <span class="title function_">flip</span><span class="params">()</span> &#123;</span><br><span class="line">    limit = position;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>get()</p></li><li><p>rewind()：倒带</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Buffer <span class="title function_">rewind</span><span class="params">()</span> &#123;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flip() 和 rewind() 的区别就是 limit 参数</p></li><li><p>mark() 和 reset(): mark() 标记当前位置，当调用 reset() 的时候，回到标记的位置</p></li><li><p>clear()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Buffer <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    limit = capacity;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>使用 clear() 或者 compact() 可以将读模式改为写模式</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>allocate() -&gt; put() -&gt; flip() -&gt; get() -&gt; clear() &#x2F; compoact() -&gt; put()</p><h2 id="申请内存的两种方式"><a href="#申请内存的两种方式" class="headerlink" title="申请内存的两种方式"></a>申请内存的两种方式</h2><p>申请堆内存，读写效率较低，受到 GC 影响</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer.allocate() -&gt; java.nio.HeapByteBuffer</span><br></pre></td></tr></table></figure><p>申请直接内存，读写效率高（少一次拷贝），不会受到 GC 影响，分配内存的时候效率低，使用不当可能造成内存泄漏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer.allocateDirect() -&gt; java.nio.DirectByteBuffer</span><br></pre></td></tr></table></figure><h1 id="NIO-Channels"><a href="#NIO-Channels" class="headerlink" title="NIO Channels"></a>NIO Channels</h1><h2 id="常用-Channel"><a href="#常用-Channel" class="headerlink" title="常用 Channel"></a>常用 Channel</h2><ul><li>FileChannel</li><li>(FileInputStream() &#x2F; FileOutputStream()).geChannel(), ByteBuffer.flip(), channel.force(true), channel.close()</li><li>transferTo(position, length, target)：零拷贝, 每次 2G 上限</li><li>ServerSocketChannel</li><li>SocketChannel</li><li>socketChannel.configureBlocking(true &#x2F; false)，默认是 blocking, 因为有个属性设置 nonBlocking 为 false</li><li>DatagramChannael</li></ul><h1 id="NIO-Selector"><a href="#NIO-Selector" class="headerlink" title="NIO Selector"></a>NIO Selector</h1><p>选择器的使命是处理 IO 的多路复用，完成通道的注册，监听，事件查询</p><p>选择器和通道的关系是监控和被监控的关系</p><h2 id="IO-事件类型"><a href="#IO-事件类型" class="headerlink" title="IO 事件类型"></a>IO 事件类型</h2><ul><li>SelectionKey.OP_READ</li><li>SelectionKey.OP_WRITE</li><li>SelectionKey.OP_CONNECT</li><li>SelectionKey.OP_ACCEPT</li></ul><h2 id="SelectionKey"><a href="#SelectionKey" class="headerlink" title="SelectionKey"></a>SelectionKey</h2><p>如何知道一个 Channel 是否能被监测？</p><p>看这个 Channel 是否直接或间接继承 SelectableChannel，比如 FileChannel 就不是，而 SocketChannel 就是</p><p>注册到 Selector 的 Channel 必须是处于非阻塞模式下，因为 FileChannel 只有阻塞模式，不能切换到非阻塞模式，所以 FileChannel 不能和选择器一起使用</p><p>Selector.select() 本身是阻塞的，所以放在 while true 里不用担心 CPU 空转</p><h1 id="Reactor-模式"><a href="#Reactor-模式" class="headerlink" title="Reactor 模式"></a>Reactor 模式</h1><p>Reactor 模式由 Reactor 线程，Handlers 处理器两大角色组成</p><ul><li>Reactor 线程：负责响应 IO 事件，并且分发到 Handlers 处理器</li><li>Handlers 处理器：非阻塞地执行业务逻辑处理</li></ul><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>channel -&gt; selector -&gt; reactor -&gt; handler</p><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><ul><li>响应速度快，虽然同一 Reactor 线程本身是同步的，但是不会被单个连接的 IO 操作所阻塞</li><li>避免了多线程同步和线程之前频繁切换的开销</li><li>通过增加 Reactor 线程的个数，可以进行灵活扩展，充分利用 CPU 资源</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>每次引入新东西肯定是增加了原系统的复杂性</li><li>需要操作系统底层支持 IO 多路复用系统调用才可以</li></ul><h1 id="为什么在海量连接的情况下，线程池的方式不好使"><a href="#为什么在海量连接的情况下，线程池的方式不好使" class="headerlink" title="为什么在海量连接的情况下，线程池的方式不好使"></a>为什么在海量连接的情况下，线程池的方式不好使</h1><ul><li>线程的创建和销毁成本很高</li><li>线程本身占用较大内存，Java 线程栈内存分配 <code>512K - 1M</code></li><li>线程切换的成本很高，因为需要保存上下文，如果线程切换的时间比线程本身执行所需要的时间还多，就是负优化</li></ul><h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><ul><li>数据结构大小：原则上，越小，效率越高</li><li>结构复杂度：越复杂，效率越低</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Netty&quot;&gt;&lt;a href=&quot;#Netty&quot; class=&quot;headerlink&quot; title=&quot;Netty&quot;&gt;&lt;/a&gt;Netty&lt;/h1&gt;&lt;h2 id=&quot;基本组件&quot;&gt;&lt;a href=&quot;#基本组件&quot; class=&quot;headerlink&quot; title=&quot;基本组件&quot;</summary>
      
    
    
    
    <category term="程序设计" scheme="https://linweiyuan.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="Java" scheme="https://linweiyuan.github.io/tags/Java/"/>
    
    <category term="Netty" scheme="https://linweiyuan.github.io/tags/Netty/"/>
    
    <category term="NIO" scheme="https://linweiyuan.github.io/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux简易安装脚本（i3, kde, deepin）</title>
    <link href="https://linweiyuan.github.io/2022/04/08/Arch-Linux%E7%AE%80%E6%98%93%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%88i3-kde-deepin%EF%BC%89.html"/>
    <id>https://linweiyuan.github.io/2022/04/08/Arch-Linux%E7%AE%80%E6%98%93%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%88i3-kde-deepin%EF%BC%89.html</id>
    <published>2022-04-08T04:19:56.000Z</published>
    <updated>2023-01-13T01:21:15.495Z</updated>
    
    <content type="html"><![CDATA[<p>脚本：<a href="https://github.com/linweiyuan/archlinux-install-script">https://github.com/linweiyuan/archlinux-install-script</a><br>todo: 异常判断，选项改 whiptail</p><p>包缓存：flexo</p><p>内网 dns：dnsmasq</p><div class="video"><iframe src="//player.bilibili.com/player.html?aid=603487924&bvid=BV1VB4y177EU&cid=842532702&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;脚本：&lt;a href=&quot;https://github.com/linweiyuan/archlinux-install-script&quot;&gt;https://github.com/linweiyuan/archlinux-install-script&lt;/a&gt;&lt;br&gt;todo: 异</summary>
      
    
    
    
    <category term="操作系统" scheme="https://linweiyuan.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Arch Linux" scheme="https://linweiyuan.github.io/tags/Arch-Linux/"/>
    
  </entry>
  
  <entry>
    <title>关于JDK18的UTF-8</title>
    <link href="https://linweiyuan.github.io/2022/03/24/%E5%85%B3%E4%BA%8EJDK18%E7%9A%84UTF-8.html"/>
    <id>https://linweiyuan.github.io/2022/03/24/%E5%85%B3%E4%BA%8EJDK18%E7%9A%84UTF-8.html</id>
    <published>2022-03-24T07:07:34.000Z</published>
    <updated>2023-01-13T01:21:15.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JEP-400-UTF-8-by-Default"><a href="#JEP-400-UTF-8-by-Default" class="headerlink" title="JEP 400: UTF-8 by Default"></a>JEP 400: UTF-8 by Default</h1><p>JDK18 里有一项改进叫：<a href="https://openjdk.org/jeps/400">JEP 400: UTF-8 by Default</a></p><p>其实是将默认字符集改为 UTF-8，只是 Charset.defaultCharset() 返回 UTF-8，在这之前的 JDK 版本中，返回的字符集根据操作系统的不同会不一样，有可能会导致乱码，可以看到这个方法的注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Returns the <span class="keyword">default</span> charset of <span class="built_in">this</span> Java virtual machine.</span><br><span class="line"></span><br><span class="line">The <span class="keyword">default</span> charset is UTF-<span class="number">8</span>, unless changed in an implementation specific manner.</span><br></pre></td></tr></table></figure><p>之前的版本只有这一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Returns the <span class="keyword">default</span> charset of <span class="built_in">this</span> Java virtual machine.</span><br></pre></td></tr></table></figure><p>所以并不是改了 String 的实现</p><h1 id="JEP-254-Compact-Strings"><a href="#JEP-254-Compact-Strings" class="headerlink" title="JEP 254: Compact Strings"></a>JEP 254: Compact Strings</h1><p>Java 中的 String 默认采用 UTF-16 字符集，这其实是历史的包袱，为了要支持新版本的 Unicode，又要保证向后兼容，因为谁也想不到计算机的发展是如此迅猛，当时是足够用了</p><p>如今用了 UTF-16，可以存大部分辅助字符（Emoji 等）了，但是对于西方国家，日常的简单字母，有点浪费</p><p>因此 JDK9 进行了改动，将底层 char[] 改为 byte[]，并且在原有基础上加入了 Latin-1（ISO-8859-1）字符集，详细可以看这个 JEP：<a href="https://openjdk.org/jeps/254">JEP 254: Compact Strings</a></p><p>String(UTF-16 + Latin-1)，其中内部多了个字段 coder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span> coder;</span><br></pre></td></tr></table></figure><p>当无法用 Latin-1 表示的时候，才使用 UTF-16，减少了内存的浪费</p><p>所以 JEP 400 和 String 本身的实现关系不大</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JEP-400-UTF-8-by-Default&quot;&gt;&lt;a href=&quot;#JEP-400-UTF-8-by-Default&quot; class=&quot;headerlink&quot; title=&quot;JEP 400: UTF-8 by Default&quot;&gt;&lt;/a&gt;JEP 400: UTF-</summary>
      
    
    
    
    <category term="程序设计" scheme="https://linweiyuan.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="Java" scheme="https://linweiyuan.github.io/tags/Java/"/>
    
    <category term="JDK18" scheme="https://linweiyuan.github.io/tags/JDK18/"/>
    
  </entry>
  
  <entry>
    <title>ELK相关知识点</title>
    <link href="https://linweiyuan.github.io/2022/03/04/ELK%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9.html"/>
    <id>https://linweiyuan.github.io/2022/03/04/ELK%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9.html</id>
    <published>2022-03-04T09:19:10.000Z</published>
    <updated>2023-01-13T01:21:15.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h1><p>何为 ELK，Elasticsearch + Logstach + Kibaba</p><ul><li>Elasticsearch：存储，计算，搜索数据</li><li>Logstash：数据抓取</li><li>Kibaba：数据可视化</li></ul><h1 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h1><p>要说倒排索引，首先要从正向索引谈起，比如 MySQL</p><p>MySQL 这类关系型数据库，如果搜索 ID，会直接走索引（索引设置得正确的前提下），一旦走了索引，查询起来是很快的，但是如果是模糊查询，就不一定了，需要逐行扫描，在索引设置得不好的情况下，需要全表扫描，数据量大的场景下效率非常低</p><p>倒排索引中有两个重要的概念：</p><ul><li>文档（Document）：ES 里保存的数据，其中的每一条数据就是一个文档，类似数据库的一条记录</li><li>词条（Term）：对数据进行分词后得到的有意义的词语</li></ul><p>倒排索引是对正向索引的一种特殊处理：</p><ul><li>将文档数据利用分词算法，得到一堆的词条</li><li>ES 里保存的每行数据包括词条，词条所在文档 ID 等信息</li><li>因为词条具有唯一性，可以给词条创建索引</li></ul><p>搜索流程：</p><ul><li>发起搜索请求</li><li>分词得到词条</li><li>根据词条拿到 ES 里的文档 ID（这个 ID 会和 MySQL 里的 ID 同步）</li><li>根据 ID （去 MySQL）拿到具体数据</li></ul><p>虽然需要查两遍，先查倒排索引，再查正向索引，但因为都走了索引，所以非常快，无需全表扫描</p><p>两者的关系如下表</p><table><thead><tr><th align="center">MySQL</th><th align="center">Elasticsearch</th></tr></thead><tbody><tr><td align="center">table</td><td align="center">index</td></tr><tr><td align="center">row</td><td align="center">document</td></tr><tr><td align="center">column</td><td align="center">field</td></tr><tr><td align="center">schema</td><td align="center">mapping</td></tr><tr><td align="center">sql</td><td align="center">dsl</td></tr></tbody></table><p>两者不能比较，关注的领域不同，MySQL 擅长事务类型操作，可以确保数据的安全和一致性，ES 则擅长海量数据的搜索，分析，计算，实际上往往两者结合使用</p><h1 id="IK-分词器"><a href="#IK-分词器" class="headerlink" title="IK 分词器"></a>IK 分词器</h1><ul><li>ik_smart：只能切分，粗粒度</li><li>ik_max_word：最细切分，细粒度</li></ul><h1 id="ES-搜索高亮"><a href="#ES-搜索高亮" class="headerlink" title="ES 搜索高亮"></a>ES 搜索高亮</h1><ul><li>给文档中的关键字加一个标签</li><li>页面给这个标签设置 高亮 CSS</li></ul><h1 id="ES-集群"><a href="#ES-集群" class="headerlink" title="ES 集群"></a>ES 集群</h1><p>不管什么集群，集群无非解决几个问题</p><ul><li>海量数据存储</li><li>单点故障</li></ul><p>ES 通过对数据进行分片，存储到不同的节点中，将备份放到对方节点，完成互相备份，当集群中的某个节点挂掉后，会立即将挂掉的节点上的分片数据迁移到其他节点，确保数据安全</p><h1 id="集群监控"><a href="#集群监控" class="headerlink" title="集群监控"></a>集群监控</h1><p>可以使用 Kibana 直接操作，或者 Cerebro</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ELK&quot;&gt;&lt;a href=&quot;#ELK&quot; class=&quot;headerlink&quot; title=&quot;ELK&quot;&gt;&lt;/a&gt;ELK&lt;/h1&gt;&lt;p&gt;何为 ELK，Elasticsearch + Logstach + Kibaba&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearc</summary>
      
    
    
    
    <category term="ELK" scheme="https://linweiyuan.github.io/categories/ELK/"/>
    
    
    <category term="Elasticsearch" scheme="https://linweiyuan.github.io/tags/Elasticsearch/"/>
    
    <category term="Logstash" scheme="https://linweiyuan.github.io/tags/Logstash/"/>
    
    <category term="Kibana" scheme="https://linweiyuan.github.io/tags/Kibana/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ相关知识点</title>
    <link href="https://linweiyuan.github.io/2022/02/17/RabbitMQ%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9.html"/>
    <id>https://linweiyuan.github.io/2022/02/17/RabbitMQ%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9.html</id>
    <published>2022-02-17T08:54:15.000Z</published>
    <updated>2023-01-13T01:21:15.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul><li>publisher：生产者（建立连接 -&gt; 创建 channel -&gt; 声明队列 -&gt; 发送消息 -&gt; 关闭连接和 channel）</li><li>consumer：消费者（建立连接 -&gt; 创建 channel -&gt; 声明队列 -&gt; 订阅消息）</li><li>exchange：交换机，负责消息路由<ul><li>Fanout Exchange：广播（所有绑定到该交换机的队列都能收到消息）</li><li>Direct Exchange：路由（根据 routingKey 来发送到指定的队列）</li><li>Topic Exchange： 主题（通过 routingKey 通配符来发送到指定的队列，#匹配一个或对个，*匹配一个）</li></ul></li><li>queue：队列，存储消息<ul><li>基本消息队列 BasicQueue：一对一</li><li>工作消息队列 WorkQueue：一对多</li></ul></li><li>virtualHost：虚拟主机，消息隔离</li></ul><h2 id="WorkQueue（TaskQueue）任务模型"><a href="#WorkQueue（TaskQueue）任务模型" class="headerlink" title="WorkQueue（TaskQueue）任务模型"></a>WorkQueue（TaskQueue）任务模型</h2><p>多个消费者绑定到一个队列，共同消费队列中的消息</p><ul><li>默认是平均给每个消费者，如果考虑消费者的处理能力，需要设置 prefetch 属性，每次获取一条，消费一条再获取，达到能者多劳的目的</li><li>同一条消息只会被一个消费者处理</li></ul><h2 id="发布-x2F-订阅模型"><a href="#发布-x2F-订阅模型" class="headerlink" title="发布&#x2F;订阅模型"></a>发布&#x2F;订阅模型</h2><p>对比 WorkQueue，多了一个 exchange 交换机</p><ul><li>生产者发送消息不是发送到队列，而是发送至交换机</li><li>消费者订阅队列</li><li>exchange 只负责转发消息，不会对消息进行存储，如果没有正确配置队列或路由规则，消息就会丢失</li></ul><h1 id="如何保证消息可靠性"><a href="#如何保证消息可靠性" class="headerlink" title="如何保证消息可靠性"></a>如何保证消息可靠性</h1><p>要确保发送的消息至少被消费一次，需要从源头开始，生产者是否成功发送消息到交换机，交换机是否正常发送消息到队列，队列里的消息是否成功被消费者消费</p><p>RabbitMQ 提供了 publisher confirm 和 publish-return 机制来避免消息在发送的过程中丢失</p><ul><li><p>publish-confirm</p><ul><li>如果消息成功投递到交换机，返回 ack</li><li>如果消息未投递到交换机，返回 nack</li></ul></li><li><p>publish-return</p><ul><li>如果消息投递到交换机了，但是没有路由到队列，返回 ack 及路由失败原因</li></ul></li></ul><p>考虑到 MQ 本身的稳定，可以分别将交换机，队列，消息都设置为持久化</p><h1 id="如何解决消息堆积问题"><a href="#如何解决消息堆积问题" class="headerlink" title="如何解决消息堆积问题"></a>如何解决消息堆积问题</h1><p>当发送消息超过了处理消息的速度，就会造成消息堆积，如果队列中的消息达到上限，那么最早受到的消息，可能就会变成死信，然后被丢弃</p><p>消息堆积的本质是消费者消费消息的速度跟不上，所以可以从下面几个方面来进行考虑</p><ul><li>增加消费者个数，那么速度就成倍提高了</li><li>增加队列长度，可以暂存更多的消息</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;publisher：生产者（建立连接 -&amp;gt; 创建 channel -&amp;gt; 声明队列 -&amp;gt; 发送消</summary>
      
    
    
    
    <category term="消息队列" scheme="https://linweiyuan.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="RabbitMQ" scheme="https://linweiyuan.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Redis相关知识点</title>
    <link href="https://linweiyuan.github.io/2022/01/09/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9.html"/>
    <id>https://linweiyuan.github.io/2022/01/09/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9.html</id>
    <published>2022-01-09T06:03:16.000Z</published>
    <updated>2023-01-13T01:21:15.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis：Remote-Dictionary-Server"><a href="#Redis：Remote-Dictionary-Server" class="headerlink" title="Redis：Remote Dictionary Server"></a>Redis：Remote Dictionary Server</h1><ul><li>基于内存，速度非常快（因此受物理内存大小限制）</li><li>数据结构非常丰富（String， List， Hash， Set， SortedSet）</li><li>单线程，避免了线程切换和锁机制的性能消耗</li><li>可持久化（RDB + AOF）</li><li>支持发布订阅</li><li>支持 Lua 脚本</li><li>支持分布式锁</li><li>支持原子操作和事务</li><li>支持主从复制（Master-Slave）和高可用（Redis Sentinel）（3.0 版本以上）</li><li>支持管道（管道在这里类似于 batch，一次性发送多个命令，一次性返回所有结果，减少网络开销）</li></ul><h1 id="主要的五种数据结构及使用场景"><a href="#主要的五种数据结构及使用场景" class="headerlink" title="主要的五种数据结构及使用场景"></a>主要的五种数据结构及使用场景</h1><p>Redis 支持多种数据结构，常用的有 5 种</p><ul><li>String：计数器，kv 存储，限流，分布式锁</li><li>List：当队列来使用（lpush + rpop 或者 rpush + lpop）；发红包（抢红包是入队，拆红包则是出队）；列表（朋友圈点赞，评论）</li><li>Hash：kv，比如存一些标签信息，在保存用户信息等的场景，Hash 和 String 的不同点在于，String 要修改某个字段必须将整条用户完整信息取出来，再进行系列化反序列化操作，而 Hash 可以只对某个字段进行修改，节省了网络流量，不过 Hash 要比 String 占用多一点内存；购物车（用户 id，商品 id，商品数量）；存储对象</li><li>Set：好友、关注、粉丝、感兴趣的人的集合（sinter 获取交集，sismember 判断是否存在，scard 获取数量）；首页随机推荐展示（srandmember）；存储需要去重的场景，比如中奖，保证不会中两次</li><li>SortedSet：排行榜（因为有序）</li></ul><h1 id="单线程的-Redis-为什么这么快"><a href="#单线程的-Redis-为什么这么快" class="headerlink" title="单线程的 Redis 为什么这么快"></a>单线程的 Redis 为什么这么快</h1><ul><li>Redis 是完全基于内存的，所以读写效率非常高，当然 Redis 存在持久化操作，但 Redis 的持久化操作是通过 fork 子进程和利用 Linux 系统的页缓存技术来完成，所以并不会影响 Redis 的性能</li><li>对于 Redis 来说，它的性能瓶颈主要在网络和 IO 上，而不在 CPU，多线程频繁进行上下文切换会带来额外的性能消耗，可能会造成负优化；Redis 高版本也支持多线程，但是主要是用来执行对一些大键值对的删除操作，通过多线程非阻塞地释放内存空间也能减少对 Redis 主线程的阻塞时间，提高执行的效率</li><li>数据结构设计得合理高效</li><li>采用了非阻塞 IO 多路复用机制：IO 多路复用是利用 select、poll、epoll 可以同时监测多个流的 IO 事件的能力，在空闲的时候，会阻塞当前线程，当有 IO 事件发生时才唤醒来处理就绪的流，这样就避免了大量的无用操作</li></ul><h1 id="数据过期淘汰策略"><a href="#数据过期淘汰策略" class="headerlink" title="数据过期淘汰策略"></a>数据过期淘汰策略</h1><p>Redis 中数据过期淘汰策略采用的是定期删除 + 惰性删除</p><ul><li>定期删除（activeExpireCycle）：Redis 后台有一个定时器来定时监视所有的 key，过期就删除。通过定期删除策略，可以保证过期的 key 最后都会被删掉，缺点就是每次都要都遍历 Redis 中的所有 key，非常消耗 CPU 资源，如果 key 过期了，但是定时器还没开始工作，这个过期的 key 就还能用</li><li>惰性删除（expireIfNeeded）：在使用 key 时，先判断 key 是否过期，如果过期则删除。这种方式也有缺点，就是虽然这个 key 过期了，但是一直没人用，那么它就会一直存在 Redis 中，造成浪费</li></ul><p>因此 Redis 将这两种方式结合起来，定时随机抽取一些幸运 key 进行删除</p><p>这样没有缺点吗？</p><p>有，如果某个 key 是天选之子，每次都抽不到，但是已经过期了，就会常驻内存</p><p>所以 Redis 还会有另外的机制来处理这种情况，就是内存淘汰</p><h1 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h1><p>volatile：设置过期时间的 key<br>allkeys：全部 key<br>lru：最近最少使用<br>lfu：最近最不经常使用<br>random：随机<br>ttl：过期时间<br>noeviction：永不过期</p><p>排列组合：</p><ul><li>volatile-lru</li><li>allkeys-lru</li><li>volatile-lfu</li><li>allkeys-lfu</li><li>volatile-random</li><li>allkeys-random</li><li>volatile-ttl</li><li>noeviction</li></ul><p>默认是永不过期，如果满了就会报 OOM</p><h1 id="Redis-和-Memcached-的区别"><a href="#Redis-和-Memcached-的区别" class="headerlink" title="Redis 和 Memcached 的区别"></a>Redis 和 Memcached 的区别</h1><ul><li>存储方式不同：Memcachedb 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小；Redis 有部分存在硬盘上，这样能保证数据的持久性</li><li>数据类型支持：Memcached 对数据类型支持相对简单；Redis 有复杂的数据类型</li></ul><h1 id="为什么要使用-Redis-而不用-map-x2F-guava-做缓存"><a href="#为什么要使用-Redis-而不用-map-x2F-guava-做缓存" class="headerlink" title="为什么要使用 Redis 而不用 map&#x2F;guava 做缓存"></a>为什么要使用 Redis 而不用 map&#x2F;guava 做缓存</h1><p>缓存分为本地缓存和分布式缓存</p><p>map 或者 guava 实现的是本地缓存，这种缓存是存在内存中的，一旦 JVM 挂了或手动停掉，数据就丢失了，本地缓存无法做到多实例共享，因为每个实例都有自己的一份，生命周期和 JVM 绑定</p><p>Redis 或者 Memcached 则称为分布式缓存，支持多实例共享，Redis 还支持数据持久化，宕机数据还在</p><h1 id="Redis-三大经典问题"><a href="#Redis-三大经典问题" class="headerlink" title="Redis 三大经典问题"></a>Redis 三大经典问题</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>查询一个数据库不存在的数据，因为数据库没有，所以不能将数据库值缓存起来，导致每次请求都直接去到数据库，Redis 形同虚设</p><p>解决方案：</p><ul><li><p>缓存空值<br>当请求的数据库不存在于 Redis 中也不存在于数据库时，设置一个默认空值，后续再进行查询时就直接返回，避免请求去到数据库，除此之外还需要对该数据设置一个合适的过期时间，不然后续这个 key 的数据在数据库有了，永远不能被查到</p></li><li><p>布隆过滤器<br>在数据写入数据库的同时，将这个 ID 同步到布隆过滤器中，当请求的 ID 不存在布隆过滤器中，则说明该请求查询的数据一定没有在数据库中保存，就不要再去查数据库</p><ul><li>原理：首先分配一块数组，里面的值全为 0，当存入元素时，采用 N 个哈希函数对该元素进行哈希计算，映射出来的位置全部设置为 1；当检查这个 key 是否存在时，也是同样的方法，如果得到的全为 1，则 key 存在；布隆过路器存的只是这个 key 计算出来的哈希值，并不是这个 key 本身，而哈希函数是会出现碰撞的，所以就算计算出来全是 1，也不能保证其实这个 key 存在，也就是会出现判断 key 存在，但实际不存在的的情况，存在误判；反之，当判断这个 key 不存在的时候，就一定不存在</li></ul></li><li><p>对于恶意构造的请求</p><ul><li>对参数进行校验，非法则拦截</li><li>拉黑 IP（治标不治本）</li></ul></li></ul><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>高并发流量，访问的这个数据是热点数据，请求的数据在数据库中存在，但是 Redis 存的那一份已经过期，后端需要从数据库加载数据并写到 Redis（单一热点数据、高并发、数据失效）</p><ul><li>解决方案：<ul><li>设置随即过期时间：让缓存数据慢慢过期</li><li>缓存预热：提前把热门数据存入 Redis，设置一个较大的过期时间</li><li>锁机制：当发现缓存失效时，需要先获取锁，成功后才执行数据库查询和写数据到缓存的操作，失败则说明当前有其他线程在对数据库进行操作，休眠一段时间再重试</li></ul></li></ul><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>分两种情况</p><p>Redis 中大量数据同时失效，高并发场景下，大量的请求直接去到数据库，造成数据库压力激增，严重的话会搞挂数据库</p><ul><li>解决方案：<ul><li>设置随即过期时间，避免大量数据同时过期</li><li>对非核心业务的接口进行限流，避免过多请求直接被去到数据库</li><li>后台开启时任务，在缓存快要失效时及时更新缓存（具体问题具体分析）</li></ul></li></ul><p>Redis 挂了，也会使请求全部去到数据库</p><ul><li>解决方案：<ul><li>将热点数据均匀分布在不同的节点上</li><li>服务熔断和限流</li><li>构建高可用集群</li></ul></li></ul><p>缓存击穿和缓存雪崩的最大区别就是单一热点数据失效，还是大量数据同时失效</p><p>总之把握前中后的原则去进行系统设计和考虑</p><p>故障之前，尽可能集群部署，放置单点故障<br>发生了故障，对服务进行限流、降级操作，避免搞挂 MySQL<br>修复了故障后，通过 Redis 持久化机制 RDB 和 AOF，恢复缓存数据</p><h1 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h1><ul><li>RDB（Redis Database Backup file）：Redis 快照文件，里面是一些二进制的数据，通过 save、bgsave 等命令进行保存，宕机恢复起来较快，文件体积也小，有压缩</li><li>AOF（Append Only File）：对 Redis 操作的每一条写命令都会记录起来，是纯文本，人可以看，故障恢复时，重新跑记录的命令，因为记录每一条命令，所以体积会较大</li></ul><p>Redis 支持同时开启 RDB 和 AOF，在这种情况下，会优先利用 AOF 文件来恢复数据，因为 AOF 文件保存了每一条记录，相对来说数据完整性高一点</p><h1 id="Redis-主从"><a href="#Redis-主从" class="headerlink" title="Redis 主从"></a>Redis 主从</h1><p>单节点 Redis 的并发能力有上限，搭建主从集群可以提高并发能力，实现读写分离<br>只有 master 节点可以执行写操作，slave 节点只能执行读操作</p><h2 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h2><p>主从同步分为全量同步和增量同步</p><ul><li>全量同步<br>当 slave 第一次连接到 master 时，会执行一次全量同步，这个时候 master 会将内存中的数据生成快照 RDB，并发送给 slave，后续通过发送保存在 repl_backlog 的命令给 slave 完成增量同步<br>怎么知道是不是第一次连接？<br>master 和 slave 都有一个 replication id，如果不一致，则是第一次同步，那么 slave 就会修改自己的 id 为 master 的 id<br>如果 slave 断开太久，导致 offset 差太多，也要全量同步，offset 可以简单理解为 slave 和 master 的数据相差的量，详细的话记不清了，有个圆环什么的，如果在圆上走了一圈数据还没同步过去，那圆上的数据就会被覆盖，为了保证数据的一致性，就要全量同步</li><li>增量同步<br>slave 把 offset 发给 master，master 去 repl_backlog 里查看，并发送 offset 之后的命令给 slave</li></ul><h1 id="Redis-Sentinel-哨兵机制"><a href="#Redis-Sentinel-哨兵机制" class="headerlink" title="Redis Sentinel 哨兵机制"></a>Redis Sentinel 哨兵机制</h1><p>Sentinel 是 Redis 的高可用解决方案，用来对 Redis 主从节点进行监控，发生故障时通过投票机制选举出新的 master，并将所有 slave 连接到新的 master 上</p><p>哨兵也是一个 Redis 服务器，运行的是 redis-sentinel 命令，而普通 redis 服务运行的则是 redis-server 命令</p><p>哨兵不提供数据服务，通常配置成单数，可以运行多个实例组成一个分布式系统</p><p>对于一些起监控作用的中间件，完成的事情无非就是下面几个：</p><ul><li>监控：确保主从节点正常运行</li><li>通知：出现问题时发出通知</li><li>故障转移：选举新 master，将其他 slave 连接到新的 master 上</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis：Remote-Dictionary-Server&quot;&gt;&lt;a href=&quot;#Redis：Remote-Dictionary-Server&quot; class=&quot;headerlink&quot; title=&quot;Redis：Remote Dictionary Server&quot;&gt;</summary>
      
    
    
    
    <category term="数据库" scheme="https://linweiyuan.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://linweiyuan.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
