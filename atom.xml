<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林伟源的技术博客</title>
  
  
  <link href="https://linweiyuan.github.io/atom.xml" rel="self"/>
  
  <link href="https://linweiyuan.github.io/"/>
  <updated>2023-07-27T15:27:10.804Z</updated>
  <id>https://linweiyuan.github.io/</id>
  
  <author>
    <name>林伟源</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何生成 GPT-4 arkose_token</title>
    <link href="https://linweiyuan.github.io/2023/06/24/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-GPT-4-arkose-token.html"/>
    <id>https://linweiyuan.github.io/2023/06/24/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-GPT-4-arkose-token.html</id>
    <published>2023-06-24T15:10:24.000Z</published>
    <updated>2023-07-27T15:27:10.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20230626-早上"><a href="#20230626-早上" class="headerlink" title="20230626 早上"></a>20230626 早上</h1><p>以下逆向 JS 内容已过期，参考：<a href="https://github.com/acheong08/ChatGPT/issues/1431#issuecomment-1606145567">https://github.com/acheong08/ChatGPT/issues/1431#issuecomment-1606145567</a></p><p>有另一种简单的方法生成 <code>arkose_token</code>：<a href="https://github.com/linweiyuan/chatgpt-arkose-token-api">chatgpt-arkose-token-api</a></p><h1 id="20230626-下午"><a href="#20230626-下午" class="headerlink" title="20230626 下午"></a>20230626 下午</h1><p>当天，似乎上面的方法又失效了，所以还是先用回下面的方法</p><h1 id="20230626-夜里-20230627"><a href="#20230626-夜里-20230627" class="headerlink" title="20230626 夜里 - 20230627"></a>20230626 夜里 - 20230627</h1><p><code>arkose_token</code> 突然不检测了，但是还是先传着，保持和官网一样</p><h1 id="2023-06-28"><a href="#2023-06-28" class="headerlink" title="2023-06-28"></a>2023-06-28</h1><p>又开始检测了</p><h1 id="2023-07-08"><a href="#2023-07-08" class="headerlink" title="2023-07-08"></a>2023-07-08</h1><p><a href="https://github.com/linweiyuan/chatgpt-arkose-token-api">chatgpt-arkose-token-api</a> 复活，主要是借鉴了 <a href="https://github.com/xyhelper/xyhelper-arkose">xyhelper&#x2F;xyhelper-arkose</a></p><p>把 <code>html</code> 页面放在服务器上运行，不行，会弹验证码</p><p>但是单独起个服务跑 <code>html</code> 页面，又可以，莫名其妙</p><p>（我自己测试，如果服务器上开启了 <code>IPv6</code>，会拿不到 <code>token</code>，原因未知）</p><p>服务健康程度监控页面：<a href="https://stats.churchless.tech/">Health Status</a></p><h1 id="2023-07-27"><a href="#2023-07-27" class="headerlink" title="2023-07-27"></a>2023-07-27</h1><p>方法已失效，不折腾了</p><hr><h1 id="GPT-4-403"><a href="#GPT-4-403" class="headerlink" title="GPT-4 403"></a>GPT-4 403</h1><p>GPT-4 对 <code>arkose_token</code> 的校验在最近几天里每天都改变很多次，有时早上提交代码，下午就失效，或者晚上提交，第二天失效</p><p><img src="/2023/06/24/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-GPT-4-arkose-token/403.png"></p><p>通过不断的试错，把所有缺失的参数全部补上，但是最后还是 403 了</p><p>于是，打算从源头出发，学习一下 JS 的逆向（本人 JS 相对新手，但是曾经也写过）</p><h1 id="arkose-token-从何来"><a href="#arkose-token-从何来" class="headerlink" title="arkose_token 从何来"></a>arkose_token 从何来</h1><p>接口：<code>https://tcr9i.chat.openai.com/fc/gt2/public_key/35536E1E-65B4-4D96-9D97-6ADB7EFF8147</code></p><p>FormData:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bda: ct + iv + s 的 base64 编码</span><br><span class="line">public_key: 35536E1E-65B4-4D96-9D97-6ADB7EFF8147</span><br><span class="line">site: https://chat.openai.com</span><br><span class="line">userbrowser: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line">capi_version: 1.5.2</span><br><span class="line">capi_mode: lightbox</span><br><span class="line">style_theme: default</span><br><span class="line">rnd: 随机数，小数点后有时 16 位，有时 17 位</span><br></pre></td></tr></table></figure><p>其他参数都是写死，并且之前不传也可以，最近必须要传，并且还要传对，不然 403</p><p>重点就是在 bda 参数里，里面的内容是加密的</p><h1 id="bda"><a href="#bda" class="headerlink" title="bda"></a>bda</h1><p>通过 F12，一步一步跟，发现了一些蛛丝马迹，最后调用的是这个方法来生成 bda 参数：<code>ALFCCJS.encrypt(bx, bv + bw)</code></p><p><img src="/2023/06/24/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-GPT-4-arkose-token/encrypt.png"></p><p>于是反推，如何生成 <code>bx</code>、<code>bv</code> 和 <code>bw</code></p><h1 id="bx"><a href="#bx" class="headerlink" title="bx"></a>bx</h1><p><code>bx</code> 依赖 <code>b5</code> 和 <code>bg</code></p><p><code>b5</code> 是一个数组，里面的东西大部分都是写死的，除了一个时间戳</p><p><img src="/2023/06/24/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-GPT-4-arkose-token/b5.png"></p><p><code>bg</code> 写死的，本次测试不传也正常（未来可能有校验）</p><p>将 <code>b5</code> 数组转成字符串，就得到了 <code>bx</code></p><p><img src="/2023/06/24/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-GPT-4-arkose-token/bx.png"></p><h1 id="bv"><a href="#bv" class="headerlink" title="bv"></a>bv</h1><p><code>bv</code> 没什么好说的，就是当前浏览器 <code>UA</code> 写死</p><p><img src="/2023/06/24/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-GPT-4-arkose-token/bv.png"></p><h1 id="bw"><a href="#bw" class="headerlink" title="bw"></a>bw</h1><p><code>bw</code> 不复杂，当前时间戳然后计算一下</p><p><img src="/2023/06/24/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-GPT-4-arkose-token/bw.png"></p><h1 id="200"><a href="#200" class="headerlink" title="200"></a>200</h1><p>最后执行加密方法，就能生成加密 <code>bda</code></p><p>如果提示 <code>ALFCCJS is not defined</code>，执行下面 JS 将其初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">script.<span class="property">type</span> = <span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&quot;https://tcr9i.chat.openai.com/cdn/fc/js/6af2c0d87b9879cbf3365be1a208293f84d37b1e/standard/funcaptcha_api.js&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></table></figure><p><img src="/2023/06/24/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-GPT-4-arkose-token/bda.png"></p><p>再设置到参数里调用接口就能拿到 <code>arkose_token</code></p><p>GPT-4 就 200 了</p><p><img src="/2023/06/24/%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-GPT-4-arkose-token/200.png"></p><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><p>一开始看错了 <code>bv</code> 成 <code>by</code>，但是字幕烧录进去了，懒得改了，其实是 <code>bx</code>, <code>bv</code>, <code>bw</code></p><div>  <video-js id="videojs-id-11f789ea-8a6a-45b7-bba0-7ca344ae01c1"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/how-to-generate-gpt-4-arkose-token/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsid11f789ea8a6a45b7bba07ca344ae01c1 = videojs('videojs-id-11f789ea-8a6a-45b7-bba0-7ca344ae01c1', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;20230626-早上&quot;&gt;&lt;a href=&quot;#20230626-早上&quot; class=&quot;headerlink&quot; title=&quot;20230626 早上&quot;&gt;&lt;/a&gt;20230626 早上&lt;/h1&gt;&lt;p&gt;以下逆向 JS 内容已过期，参考：&lt;a href=&quot;https://</summary>
      
    
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/categories/ChatGPT/"/>
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/tags/ChatGPT/"/>
    
    <category term="GPT-4" scheme="https://linweiyuan.github.io/tags/GPT-4/"/>
    
  </entry>
  
  <entry>
    <title>利用 HTTP Client 来调试 go-chatgpt-api</title>
    <link href="https://linweiyuan.github.io/2023/06/18/%E5%88%A9%E7%94%A8-HTTP-Client-%E6%9D%A5%E8%B0%83%E8%AF%95-go-chatgpt-api.html"/>
    <id>https://linweiyuan.github.io/2023/06/18/%E5%88%A9%E7%94%A8-HTTP-Client-%E6%9D%A5%E8%B0%83%E8%AF%95-go-chatgpt-api.html</id>
    <published>2023-06-18T12:31:41.000Z</published>
    <updated>2023-07-27T15:27:10.804Z</updated>
    
    <content type="html"><![CDATA[<p>接口调试</p><div>  <video-js id="videojs-id-49bb514e-77b0-4085-8d08-14bded583c4a"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/http-client-debug-go-chatgpt-api/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsid49bb514e77b040858d0814bded583c4a = videojs('videojs-id-49bb514e-77b0-4085-8d08-14bded583c4a', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接口调试&lt;/p&gt;
&lt;div&gt;
  &lt;video-js id=&quot;videojs-id-49bb514e-77b0-4085-8d08-14bded583c4a&quot; 
    class=&quot;vjs-default-skin vjs-16-9&quot; 
    controls 
   </summary>
      
    
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/categories/ChatGPT/"/>
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/tags/ChatGPT/"/>
    
    <category term="HTTP Client" scheme="https://linweiyuan.github.io/tags/HTTP-Client/"/>
    
  </entry>
  
  <entry>
    <title>Cloudflare 实用功能</title>
    <link href="https://linweiyuan.github.io/2023/05/31/Cloudflare-%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD.html"/>
    <id>https://linweiyuan.github.io/2023/05/31/Cloudflare-%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD.html</id>
    <published>2023-05-31T14:56:13.000Z</published>
    <updated>2023-07-27T15:27:10.792Z</updated>
    
    <content type="html"><![CDATA[<p>域名、CDN、DNS 解析、日志，这些老生常谈的就不多说了</p><p>免费版本也同时支持一些 DDoS 防护和 WAF，通过简单的设置即可挡掉绝大多数恶意请求和机器人，还支持限流配置，非常良心</p><p>Workers 和 Pages 这些还没用过</p><p>这里简单说一下 <code>Zero Trust</code>，目前用得比较多</p><hr><h1 id="Zero-Trust"><a href="#Zero-Trust" class="headerlink" title="Zero Trust"></a>Zero Trust</h1><p>什么是 Zero Trust？官方解释：<a href="https://www.cloudflare.com/zh-cn/learning/security/glossary/what-is-zero-trust/">https://www.cloudflare.com/zh-cn/learning/security/glossary/what-is-zero-trust/</a></p><p>利用普通人理解的大白话来说，就是一个 <code>VPN</code> 服务</p><h2 id="WARP"><a href="#WARP" class="headerlink" title="WARP"></a>WARP</h2><p>Cloudflare 提供了一个叫做 <code>WARP</code> 的程序，普通用户每次注册就会提供 1G 免费流量，而如果利用一些其他软件刷流量，则可达到无限流量（这个我没有细心研究，目前还没试过刷流量）</p><p>而更提供了一种名为 <code>Team</code> 的服务，利用它的 <code>teams-enroll-token</code> 也可实现无限流量，它会提供一个登录页面，并且可以配置指定邮箱才能收到邮件，里面有验证链接，通过后即可直接打开 WARP 客户端</p><p>举个实际应用案例：ChatGPT 不久前封禁了一大堆 VPS 的访问，一旦发出请求，全是 <code>Sorry, you have been blocked</code> 之类，这个时候如果利用这个服务，那么如果请求通过这个代理连出去，就能正常访问 ChatGPT 的接口，VPS 得以继续发光发热</p><p>为此我做了一个镜像配合服务一起使用：<a href="https://hub.docker.com/r/linweiyuan/chatgpt-proxy-server-warp">linweiyuan&#x2F;chatgpt-proxy-server-warp</a></p><p>但是，经过我测试，如果利用 <code>Team</code> 账号，虽然说是无限流量，但是经常超过一定流量就连不上，所以我设置成 <code>Free</code> 账号自动检测流量使用情况，超过 1G 了就会自动重新注册</p><p>（注意默认情况下开启 <code>Team</code> 账号后，是不允许设置 <code>proxy-mode</code> 的，具体忘记是不是会直接断开链接还是什么报错，反正用布料，需要进入 <code>Settings -&gt; WARP Client -&gt; Device settings</code> 里面设置）</p><p>当时这个注册的操作我钻了好久牛角尖，怎么每次使用都是注册，后来释然了，没有关系，能用就行，除非你有刷过无限流量的账号，就可以自己设置进去，但是太麻烦了</p><h2 id="Tunnels"><a href="#Tunnels" class="headerlink" title="Tunnels"></a>Tunnels</h2><p>还有一个就是 <code>Tunnels</code>，这个是 Cloudflare 提供的内网穿透，在 <code>Access</code> 菜单里</p><p>和 <code>frp</code> 不同的是，不需要一台服务器（<code>P2P</code> 没用过），直接跑一个程序即可，Cloudflare 自动完成域名解析，完后访问域名就可以看到内网服务了，延迟因人而异，尝试下还是不错的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;域名、CDN、DNS 解析、日志，这些老生常谈的就不多说了&lt;/p&gt;
&lt;p&gt;免费版本也同时支持一些 DDoS 防护和 WAF，通过简单的设置即可挡掉绝大多数恶意请求和机器人，还支持限流配置，非常良心&lt;/p&gt;
&lt;p&gt;Workers 和 Pages 这些还没用过&lt;/p&gt;
&lt;p&gt;这</summary>
      
    
    
    
    <category term="Cloudflare" scheme="https://linweiyuan.github.io/categories/Cloudflare/"/>
    
    
    <category term="Cloudflare" scheme="https://linweiyuan.github.io/tags/Cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT in Next.js</title>
    <link href="https://linweiyuan.github.io/2023/05/20/ChatGPT-in-Next-js.html"/>
    <id>https://linweiyuan.github.io/2023/05/20/ChatGPT-in-Next-js.html</id>
    <published>2023-05-20T12:28:28.000Z</published>
    <updated>2023-07-27T15:27:10.792Z</updated>
    
    <content type="html"><![CDATA[<p>近几天看到一个视频：<a href="https://www.youtube.com/watch?v=PGPGcKBpAk8">Real-Time Messenger Clone: Next.js 13, React, Tailwind, Prisma, MongoDB, NextAuth, Pusher (2023)</a>，看到里面的样式不错，于是进行了学习、模仿、借鉴、参考、抄袭，打算弄个小项目练练手（前端新手强烈建议看看视频，真的学到很多东西，这个油管主写代码不墨迹，该解释时会解释，其他时间也没废话）</p><p>因为我也是个新手，不会写 <code>CSS</code>，于是样式基本照搬视频教程，然后把里面提到的聊天和推送功能进行了一个魔改，实现了一个比较简陋的第三方 <code>ChatGPT</code> 客户端：<a href="https://github.com/linweiyuan/next-chatgpt">Next-ChatGPT</a>，能基本实现对话，并且可以高亮代码和流式输出（现学现改，很多 <code>Bug</code>，过段时间学多点前端再优化下，只能说能用）</p><p>在这个过程中巩固了下 <code>React</code> 的知识，并且学习了 <code>Next.js</code>、<code>Tailwind CSS</code> 等好用的工具，对 <code>SSR</code> 也有更加深入的了解，感叹前端开发之精妙，明白为什么说凡是能用 <code>JS</code> 写的最终都会用 <code>JS</code></p><hr><p>但是后端开发思维先入为主根深蒂固，开发过程中多次钻牛角尖，非常痛苦</p><p>比如这个官方文档里说，在服务端使用 <code>hook</code>：<a href="https://next-auth.js.org/tutorials/securing-pages-and-api-routes#server-side">Securing pages and API routes</a>，还有文档缺少 <code>TS</code> 的例子，也比较更新不及时</p><p>（不得不说，还是写 API 香，但是往往写前端才能称得上是一个作品，能获得更多关注）</p><hr><h2 id="魔改成果"><a href="#魔改成果" class="headerlink" title="魔改成果"></a>魔改成果</h2><div>  <video-js id="videojs-id-f38fd373-7149-4a0a-840f-1b9e615a903f"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/next-chatgpt/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsidf38fd37371494a0a840f1b9e615a903f = videojs('videojs-id-f38fd373-7149-4a0a-840f-1b9e615a903f', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;近几天看到一个视频：&lt;a href=&quot;https://www.youtube.com/watch?v=PGPGcKBpAk8&quot;&gt;Real-Time Messenger Clone: Next.js 13, React, Tailwind, Prisma, MongoDB, </summary>
      
    
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/categories/ChatGPT/"/>
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/tags/ChatGPT/"/>
    
    <category term="Next.js" scheme="https://linweiyuan.github.io/tags/Next-js/"/>
    
    <category term="Tailwind CSS" scheme="https://linweiyuan.github.io/tags/Tailwind-CSS/"/>
    
  </entry>
  
  <entry>
    <title>LMMS-One Summer&#39;s Day</title>
    <link href="https://linweiyuan.github.io/2023/05/12/LMMS-One-Summer-s-Day.html"/>
    <id>https://linweiyuan.github.io/2023/05/12/LMMS-One-Summer-s-Day.html</id>
    <published>2023-05-12T17:34:52.000Z</published>
    <updated>2023-07-27T15:27:10.796Z</updated>
    
    <content type="html"><![CDATA[<div>  <video-js id="videojs-id-de0d21f0-8ac5-4459-b003-24ce125c9a27"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/lmms-one-summer-s-day/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsidde0d21f08ac54459b00324ce125c9a27 = videojs('videojs-id-de0d21f0-8ac5-4459-b003-24ce125c9a27', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;div&gt;
  &lt;video-js id=&quot;videojs-id-de0d21f0-8ac5-4459-b003-24ce125c9a27&quot; 
    class=&quot;vjs-default-skin vjs-16-9&quot; 
    controls 
    preload=&quot;au</summary>
      
    
    
    
    <category term="LMMS" scheme="https://linweiyuan.github.io/categories/LMMS/"/>
    
    
    <category term="LMMS" scheme="https://linweiyuan.github.io/tags/LMMS/"/>
    
    <category term="千与千寻" scheme="https://linweiyuan.github.io/tags/%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/"/>
    
    <category term="One Summer&#39;s Day" scheme="https://linweiyuan.github.io/tags/One-Summer-s-Day/"/>
    
  </entry>
  
  <entry>
    <title>LMMS-Always With Me</title>
    <link href="https://linweiyuan.github.io/2023/05/12/LMMS-Always-With-Me.html"/>
    <id>https://linweiyuan.github.io/2023/05/12/LMMS-Always-With-Me.html</id>
    <published>2023-05-12T05:40:18.000Z</published>
    <updated>2023-07-27T15:27:10.796Z</updated>
    
    <content type="html"><![CDATA[<div>  <video-js id="videojs-id-a3a8d8b4-7ca4-4650-98ed-3e361a06613a"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/lmms-always-with-me/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsida3a8d8b47ca4465098ed3e361a06613a = videojs('videojs-id-a3a8d8b4-7ca4-4650-98ed-3e361a06613a', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;div&gt;
  &lt;video-js id=&quot;videojs-id-a3a8d8b4-7ca4-4650-98ed-3e361a06613a&quot; 
    class=&quot;vjs-default-skin vjs-16-9&quot; 
    controls 
    preload=&quot;au</summary>
      
    
    
    
    <category term="LMMS" scheme="https://linweiyuan.github.io/categories/LMMS/"/>
    
    
    <category term="LMMS" scheme="https://linweiyuan.github.io/tags/LMMS/"/>
    
    <category term="Always With Me" scheme="https://linweiyuan.github.io/tags/Always-With-Me/"/>
    
    <category term="千与千寻" scheme="https://linweiyuan.github.io/tags/%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>LMMS-一百万个可能</title>
    <link href="https://linweiyuan.github.io/2023/05/10/LMMS-%E4%B8%80%E7%99%BE%E4%B8%87%E4%B8%AA%E5%8F%AF%E8%83%BD.html"/>
    <id>https://linweiyuan.github.io/2023/05/10/LMMS-%E4%B8%80%E7%99%BE%E4%B8%87%E4%B8%AA%E5%8F%AF%E8%83%BD.html</id>
    <published>2023-05-10T17:42:20.000Z</published>
    <updated>2023-07-27T15:27:10.796Z</updated>
    
    <content type="html"><![CDATA[<div>  <video-js id="videojs-id-6d220581-914d-4415-850b-c9fe783f8d8d"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/lmms-a-million-possibilities/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsid6d220581914d4415850bc9fe783f8d8d = videojs('videojs-id-6d220581-914d-4415-850b-c9fe783f8d8d', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;div&gt;
  &lt;video-js id=&quot;videojs-id-6d220581-914d-4415-850b-c9fe783f8d8d&quot; 
    class=&quot;vjs-default-skin vjs-16-9&quot; 
    controls 
    preload=&quot;au</summary>
      
    
    
    
    <category term="LMMS" scheme="https://linweiyuan.github.io/categories/LMMS/"/>
    
    
    <category term="LMMS" scheme="https://linweiyuan.github.io/tags/LMMS/"/>
    
    <category term="一百万个可能" scheme="https://linweiyuan.github.io/tags/%E4%B8%80%E7%99%BE%E4%B8%87%E4%B8%AA%E5%8F%AF%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>LMMS-孤勇者</title>
    <link href="https://linweiyuan.github.io/2023/05/08/LMMS-%E5%AD%A4%E5%8B%87%E8%80%85.html"/>
    <id>https://linweiyuan.github.io/2023/05/08/LMMS-%E5%AD%A4%E5%8B%87%E8%80%85.html</id>
    <published>2023-05-08T16:41:25.000Z</published>
    <updated>2023-07-27T15:27:10.796Z</updated>
    
    <content type="html"><![CDATA[<div>  <video-js id="videojs-id-7d2e4425-a537-45ab-8e57-c64ba78b736f"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/lmms-lonely-warrior/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsid7d2e4425a53745ab8e57c64ba78b736f = videojs('videojs-id-7d2e4425-a537-45ab-8e57-c64ba78b736f', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;div&gt;
  &lt;video-js id=&quot;videojs-id-7d2e4425-a537-45ab-8e57-c64ba78b736f&quot; 
    class=&quot;vjs-default-skin vjs-16-9&quot; 
    controls 
    preload=&quot;au</summary>
      
    
    
    
    <category term="LMMS" scheme="https://linweiyuan.github.io/categories/LMMS/"/>
    
    
    <category term="LMMS" scheme="https://linweiyuan.github.io/tags/LMMS/"/>
    
    <category term="孤勇者" scheme="https://linweiyuan.github.io/tags/%E5%AD%A4%E5%8B%87%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>LMMS-夜的钢琴曲五</title>
    <link href="https://linweiyuan.github.io/2023/05/06/LMMS-%E5%A4%9C%E7%9A%84%E9%92%A2%E7%90%B4%E6%9B%B2%E4%BA%94.html"/>
    <id>https://linweiyuan.github.io/2023/05/06/LMMS-%E5%A4%9C%E7%9A%84%E9%92%A2%E7%90%B4%E6%9B%B2%E4%BA%94.html</id>
    <published>2023-05-06T16:10:14.000Z</published>
    <updated>2023-07-27T15:27:10.796Z</updated>
    
    <content type="html"><![CDATA[<div>  <video-js id="videojs-id-80c5fc73-76a0-4212-961b-0df237d7d9f6"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/lmms-melody-of-the-night-5/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsid80c5fc7376a04212961b0df237d7d9f6 = videojs('videojs-id-80c5fc73-76a0-4212-961b-0df237d7d9f6', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;div&gt;
  &lt;video-js id=&quot;videojs-id-80c5fc73-76a0-4212-961b-0df237d7d9f6&quot; 
    class=&quot;vjs-default-skin vjs-16-9&quot; 
    controls 
    preload=&quot;au</summary>
      
    
    
    
    <category term="LMMS" scheme="https://linweiyuan.github.io/categories/LMMS/"/>
    
    
    <category term="LMMS" scheme="https://linweiyuan.github.io/tags/LMMS/"/>
    
    <category term="夜的钢琴曲" scheme="https://linweiyuan.github.io/tags/%E5%A4%9C%E7%9A%84%E9%92%A2%E7%90%B4%E6%9B%B2/"/>
    
  </entry>
  
  <entry>
    <title>新版本 go-chatgpt-api</title>
    <link href="https://linweiyuan.github.io/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api.html"/>
    <id>https://linweiyuan.github.io/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api.html</id>
    <published>2023-05-03T03:12:06.000Z</published>
    <updated>2023-07-27T15:27:10.808Z</updated>
    
    <content type="html"><![CDATA[<p>经过一段时间的迭代和测试，目前新版本 <a href="https://github.com/linweiyuan/go-chatgpt-api">go-chatgpt-api</a> 貌似变得越来越稳定了，但是控制权还是在 <code>ChatGPT</code> 手上，如果官方要改接口或者随随便便加验证导致本项目失效，是轻而易举的，但是还是那句话，失效会尝试更新</p><p><a href="https://github.com/linweiyuan/java-chatgpt-api">java-chatgpt-api</a> 的话，目前还能用，但是后续一般不会再更新了，资源占用多，镜像下载量没有 <code>go-chatgpt-api</code> 十分之一，被我抛弃了</p><hr><p>详细的介绍在 <a href="https://github.com/linweiyuan/go-chatgpt-api/blob/main/README_zh.md">README</a> 和视频中，就不再多说了</p><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><div>  <video-js id="videojs-id-79039b72-3750-4933-8fe6-e87e98c35ba4"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/go-chatgpt-api-new-version/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsid79039b72375049338fe6e87e98c35ba4 = videojs('videojs-id-79039b72-3750-4933-8fe6-e87e98c35ba4', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> <h1 id="服务器被攻击"><a href="#服务器被攻击" class="headerlink" title="服务器被攻击"></a>服务器被攻击</h1><div>  <video-js id="videojs-id-2baf5b78-33ce-471d-9451-fd7683b100e0"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/server-was-attacked/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsid2baf5b7833ce471d9451fd7683b100e0 = videojs('videojs-id-2baf5b78-33ce-471d-9451-fd7683b100e0', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> <hr><p>第二天看一下比昨天还多了一倍流量，一天的入站流量比一个月的还多…</p><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/server_traffic.png"></p><hr><p>我域名本来 <code>DNS</code> 解析在阿里云，今天换到了 <code>Cloudflare</code>，换了台服务器，隐藏了源站 <code>IP</code>，开启了 <code>DDoS</code> 防护，配置了 <code>WAF</code>，然后重新上线了 <code>API</code></p><p>通过这次教训，我深刻明白到互联网上永远不要对陌生人存有善意</p><hr><h1 id="无所谓，我会出手"><a href="#无所谓，我会出手" class="headerlink" title="无所谓，我会出手"></a>无所谓，我会出手</h1><p>脚本小子罢了</p><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-18_08-36.png"></p><hr><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-18_08-37.png"></p><hr><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-18_08-37_1.png"></p><hr><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-18_08-38.png"></p><hr><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-18_08-38_1.png"></p><hr><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-18_08-38_2.png"></p><hr><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-18_08-39.png"></p><hr><h2 id="2023-05-25-2023-05-26"><a href="#2023-05-25-2023-05-26" class="headerlink" title="2023-05-25 - 2023-05-26"></a>2023-05-25 - 2023-05-26</h2><p>看来屏蔽得没错</p><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-26_08-04.png"></p><hr><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-26_08-07.png"></p><hr><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-26_08-07_1.png"></p><hr><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-26_08-07_2.png"></p><hr><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-26_08-07_3.png"></p><hr><h2 id="2023-05-27"><a href="#2023-05-27" class="headerlink" title="2023-05-27"></a>2023-05-27</h2><p>前面省略，从 <code>12：54：00</code> 到 <code>13：02：42</code>，几千个请求</p><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-27_03-28.png"></p><hr><p><img src="/2023/05/03/%E6%96%B0%E7%89%88%E6%9C%AC-go-chatgpt-api/2023-05-27_03-50.png"></p><hr><p>净逮着一家薅，如果误伤了，这就是一粒什么东西搅了一锅什么吃的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;经过一段时间的迭代和测试，目前新版本 &lt;a href=&quot;https://github.com/linweiyuan/go-chatgpt-api&quot;&gt;go-chatgpt-api&lt;/a&gt; 貌似变得越来越稳定了，但是控制权还是在 &lt;code&gt;ChatGPT&lt;/code&gt; 手上，</summary>
      
    
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/categories/ChatGPT/"/>
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>一种解决 ChatGPT Access denied 的方法</title>
    <link href="https://linweiyuan.github.io/2023/04/15/%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3-ChatGPT-Access-denied-%E7%9A%84%E6%96%B9%E6%B3%95.html"/>
    <id>https://linweiyuan.github.io/2023/04/15/%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3-ChatGPT-Access-denied-%E7%9A%84%E6%96%B9%E6%B3%95.html</id>
    <published>2023-04-15T05:42:08.000Z</published>
    <updated>2023-07-27T15:27:10.804Z</updated>
    
    <content type="html"><![CDATA[<p>ChatGPT 封禁了一堆 VPS 供应商，我自己用的 Vultr 也很早就 <code>Access denied</code></p><p>看到网上有绕过的方法，不过里面牵涉到很多计算机网络的东西，好多知识我已经忘了，所以在这里没办法解释太多，因为我也不懂</p><p>按照通俗易懂的说法就是利用 Cloudflare <code>WARP</code> 客户端，来实现一个伪装</p><p>比如我自己的服务器，开启前 <code>curl -x ipinfo.io</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;149.28.197.45&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;149.28.197.45.vultrusercontent.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Santa Clara&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;region&quot;</span><span class="punctuation">:</span> <span class="string">&quot;California&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;country&quot;</span><span class="punctuation">:</span> <span class="string">&quot;US&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;loc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;37.3924,-121.9623&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;org&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AS20473 The Constant Company, LLC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;postal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;95054&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timezone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;America/Los_Angeles&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;readme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ipinfo.io/missingauth&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>（这服务器没啥东西）</p><p>开启后 <code>curl -x socks5://127.0.0.1:40000 ipinfo.io</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;104.28.201.74&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;San Jose&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;region&quot;</span><span class="punctuation">:</span> <span class="string">&quot;California&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;country&quot;</span><span class="punctuation">:</span> <span class="string">&quot;US&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;loc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;37.3394,-121.8950&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;org&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AS13335 Cloudflare, Inc.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;postal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;95103&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timezone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;America/Los_Angeles&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;readme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ipinfo.io/missingauth&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>看 <code>org</code>，其实是 Cloudflare 了</p><hr><p>于是从实用的角度打包了另一个辅助的镜像 <a href="https://hub.docker.com/r/linweiyuan/chatgpt-proxy-server-warp">chatgpt-proxy-server-warp</a>，来达到这个目的</p><p>测试过还挺好用的</p><p>我自己开始测试的时候，如果在 VPS 上直接裸跑 <code>WARP</code> 客户端，会改到里面的网络配置，SSH 也会断开，看日志好像是修改了防火墙配置</p><p>但是在容器里跑，就没有这个问题</p><h1 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h1><div>  <video-js id="videojs-id-cfa5ea21-a9be-41f7-9682-2f44717ad27d"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/chatgpt-access-denied-warp/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsidcfa5ea21a9be41f796822f44717ad27d = videojs('videojs-id-cfa5ea21-a9be-41f7-9682-2f44717ad27d', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ChatGPT 封禁了一堆 VPS 供应商，我自己用的 Vultr 也很早就 &lt;code&gt;Access denied&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;看到网上有绕过的方法，不过里面牵涉到很多计算机网络的东西，好多知识我已经忘了，所以在这里没办法解释太多，因为我也不懂&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/categories/ChatGPT/"/>
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/tags/ChatGPT/"/>
    
    <category term="Cloudflare" scheme="https://linweiyuan.github.io/tags/Cloudflare/"/>
    
    <category term="WARP" scheme="https://linweiyuan.github.io/tags/WARP/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT 如何自建代理</title>
    <link href="https://linweiyuan.github.io/2023/04/08/ChatGPT-%E5%A6%82%E4%BD%95%E8%87%AA%E5%BB%BA%E4%BB%A3%E7%90%86.html"/>
    <id>https://linweiyuan.github.io/2023/04/08/ChatGPT-%E5%A6%82%E4%BD%95%E8%87%AA%E5%BB%BA%E4%BB%A3%E7%90%86.html</id>
    <published>2023-04-08T16:11:04.000Z</published>
    <updated>2023-07-27T15:27:10.792Z</updated>
    
    <content type="html"><![CDATA[<p>经过一段时间的摸爬滚打，慢慢摸索出一套比较好的解决方案（就目前来说）</p><p><del>只能个人自用，多人公用会出现各种奇怪的问题，并且程序里加了锁只能一个接一个对话</del></p><p>（已找到方法解决这个问题，目前支持多人用不同的 <code>accessToken</code> 共用一个代理，但是如果是相同 <code>accessToken</code> 的话，还是会提示 <code>Only one message at a time. Please allow any other responses to complete before sending another message, or wait one minute.</code>，更新了视频在最下方）</p><hr><p><a href="https://github.com/linweiyuan/java-chatgpt-api">java-chatgpt-api</a> 这边换成了 <code>Playwright</code>，开发测试会方便点，当然也是第一次用，好多 API 还用不明白，总之感觉挺强大的，如果前端玩得好，使用起来能更加得心应手</p><p>Java 版本的话，又 JVM、又 Spring、又 Playwright，跑起来非常占用内存，跑着跑着内存就占用 1G+ （可能泄漏了），适合本地部署</p><p><a href="https://github.com/linweiyuan/go-chatgpt-api">go-chatgpt-api</a> 的话则还是依赖外置代理 <a href="https://hub.docker.com/r/linweiyuan/chatgpt-proxy-server">chatgpt-proxy-server</a>，因为测试过 <a href="https://github.com/playwright-community/playwright-go">playwright-go</a>，Firefox 版本太低跑不起来，而 Chromium 能跑，但是过不了验证</p><p>Go 版本内存占用仅需十几兆，外置代理几百兆，加起来比 Java 能少一半，适合最低配 1 核 1G 服务器（当然也适合本地）</p><hr><p>其中官网里的一旦对话超过 <code>max_tokens</code>，就会自动截断，需要发继续才能回复，这里被我魔改成了后台自动发继续请求，前端只需回车，全部内容一次性返回（可能有 bug）</p><p>Java 那边依赖 Playwright 特性做了个处理验证码失败自动截图的功能方便排查，Go 这边则没有</p><p>其他的功能差不多相同，核心处理基本一样，具体实现方式可能有点差别</p><hr><p>闭源代理见仁见智，涉及到 <code>apiKey</code> 或者 <code>accessToken</code> 安全</p><p>我这边的实现还是一种不是非常稳定的方式，不一定能完美解决验证码问题，也不一定正常使用无 <code>bug</code></p><p>但是勉强能用，如果不行了，重启一下服务，大概率又复活，有问题我也会尝试修复</p><hr><p>说句题外话，我说全部代码开源，有人质疑我提供的 <code>docker</code> 镜像把自己的闭源的二进制 <code>go-chatgpt-api</code> 文件打了进去，害怕有后门</p><p>我想说，其实你可以自己打包</p><p>我这个是代码提交后 <code>github actions</code> 自动打包推送到 <code>docker</code> 仓库的</p><p>换句话说，开源的代理关心 <code>token</code> 安全，反手把自己的 <code>token</code> 往其他人搭建好的闭源代理里送。我不理解</p><p><strong>饭圈文化渗透到技术圈</strong></p><hr><p>如何使用、调试，全在视频里了</p><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><div>  <video-js id="videojs-id-b47b97c7-586f-43d8-bbdf-1ebc009ffdfc"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/chatgpt-proxy/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsidb47b97c7586f43d8bbdf1ebc009ffdfc = videojs('videojs-id-b47b97c7-586f-43d8-bbdf-1ebc009ffdfc', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> <h1 id="多人共用一个代理"><a href="#多人共用一个代理" class="headerlink" title="多人共用一个代理"></a>多人共用一个代理</h1><div>  <video-js id="videojs-id-42185f5d-bf5f-41bf-9b83-1ec29316ec18"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/go-chatgpt-api-support-multi-conversations/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsid42185f5dbf5f41bf9b831ec29316ec18 = videojs('videojs-id-42185f5d-bf5f-41bf-9b83-1ec29316ec18', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;经过一段时间的摸爬滚打，慢慢摸索出一套比较好的解决方案（就目前来说）&lt;/p&gt;
&lt;p&gt;&lt;del&gt;只能个人自用，多人公用会出现各种奇怪的问题，并且程序里加了锁只能一个接一个对话&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;（已找到方法解决这个问题，目前支持多人用不同的 &lt;code&gt;accessT</summary>
      
    
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/categories/ChatGPT/"/>
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/tags/ChatGPT/"/>
    
    <category term="Proxy" scheme="https://linweiyuan.github.io/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>异步JS</title>
    <link href="https://linweiyuan.github.io/2023/03/19/%E5%BC%82%E6%AD%A5JS.html"/>
    <id>https://linweiyuan.github.io/2023/03/19/%E5%BC%82%E6%AD%A5JS.html</id>
    <published>2023-03-19T06:12:29.000Z</published>
    <updated>2023-07-27T15:27:10.808Z</updated>
    
    <content type="html"><![CDATA[<p>按照国际惯例，说异步之前，需要说下同步</p><h1 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h1><p>比如如下代码，正常来说，会依次打印 123</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>JS 的代码执行是单线程的，这个不是说 JS 引擎只有一个线程，而是执行代码的是一个线程，另外还有其他的线程做其他的事情</p><p>在上面输出 123 的情况下，如果第二步非常耗时，而这些步骤之间没有强的依赖关系的话，就会影响效率</p><p>这个时候就可以通过回调函数来处理第二步请求，也叫 <code>callback</code></p><h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>在第二步模拟一个耗时操作，比如要用 1 秒，如果按照上面的同步方式，则会输出 1，卡 1 秒后再输出 23，但是如果用回调，则不会阻塞，输出 13，1 秒后再通过回调，输出 2</p><p>耗时任务越多，这个效果越明显</p><p>下面用 XHR 模拟一个比较真实的场景</p><p>XHR 有 5 种状态：<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState">XMLHttpRequest.readyState</a></p><table><thead><tr><th align="center">Value</th><th align="center">State</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">0</td><td align="center"><code>UNSENT</code></td><td align="center">Client has been created. <code>open()</code> not called yet.</td></tr><tr><td align="center">1</td><td align="center"><code>OPENED</code></td><td align="center"><code>open()</code> has been called.</td></tr><tr><td align="center">2</td><td align="center"><code>HEADERS_RECEIVED</code></td><td align="center"><code>send()</code> has been called, and headers and status are available.</td></tr><tr><td align="center">3</td><td align="center"><code>LOADING</code></td><td align="center">Downloading; <code>responseText</code> holds partial data.</td></tr><tr><td align="center">4</td><td align="center"><code>DONE</code></td><td align="center">The operation is complete.</td></tr></tbody></table><p>在一个普通的请求中，如果正常完成，会返回 <code>DONE</code>，然后就可以根据 xhr 的状态码和 HTTP 的状态码来进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&quot;readystatechange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === xhr.<span class="property">DONE</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">  xhr.<span class="title function_">send</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>考虑到可能会在多个地方需要发出这个请求，稍微封装下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">addEventListener</span>(<span class="string">&quot;readystatechange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === xhr.<span class="property">DONE</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">  xhr.<span class="title function_">send</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样就可以很方便的进行调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getData</span>();</span><br></pre></td></tr></table></figure><p>如果要通过回调函数的方式，则可以改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = (<span class="params">callback</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">addEventListener</span>(<span class="string">&quot;readystatechange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === xhr.<span class="property">DONE</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(xhr.<span class="property">responseText</span>, <span class="literal">undefined</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">undefined</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">  xhr.<span class="title function_">send</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>(<span class="function">(<span class="params">data, err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>传入了一个回调函数，带两个参数，并进行成功与否的处理</p><p>这部分处理很像 Go 的双返回值，太像了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getData</span><span class="params">()</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> data, <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data, err := getData()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// print data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在 <code>getData()</code> 前后分别打印 12，则会输出 12，再执行里面的耗时任务，达到一个异步处理的效果</p><p>这就是回调函数，但是回调函数带来了一个问题</p><p>如果任务之间有强依赖，比如我要先登录，再获取用户信息，再进行另外的操作，如果用回调函数的写法，就会出现一个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">login</span>(<span class="function">(<span class="params">data, err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">    <span class="title function_">getUserInfo</span>(<span class="function">(<span class="params">data, err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        <span class="title function_">getData</span>(<span class="function">(<span class="params">data, err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">            <span class="comment">// ok</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果有 N 个请求，就会出现一个 <code>&gt;</code>，业界叫回调地狱</p><p>虽然代码是给机器执行的，但那是编译过的，源代码是给人看的，这样会不好维护</p><p>于是出现了一个新对象 <code>Promise</code></p><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p><code>Promise</code> 用人话说就是一些需要一定的时间去完成的事情，不知道英文为什么叫这个名字，如果你用中文的承诺去套，也可以说得通</p><p>比如你结婚的时候，许下承诺，一辈子，那就是需要很长时间来完成的事情</p><p><code>Promise</code> 会出现两种可能的结果：</p><ul><li>成功的时候，走 <code>resolve</code></li><li>失败则走 <code>reject</code></li></ul><p>同时也接收这两个函数作为参数</p><p>这样上面的 <code>getData()</code> 就可以改写成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">addEventListener</span>(<span class="string">&quot;readystatechange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === xhr.<span class="property">DONE</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而 <code>Promise</code> 的后续一般用 <code>then()</code> 来处理 <code>resolve</code> 的结果，<code>catch()</code> 来处理 <code>reject</code> 的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getData</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure><p>那么 <code>Promise</code> 是如何解决回调地狱的?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">login</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getUserInfo</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getData</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>既然每个请求都返回 <code>Promise</code>，而 <code>Promise</code> 又要 <code>then()</code> 来处理，那么通过将 <code>Promise</code> 进行 <code>return</code>， 再通过 <code>then()</code> 来处理，则可完成相同的效果</p><p>这样在一定程度上避免的回调的嵌套，但是还是不太直观</p><p>那么还有没有另外的方式？</p><p>有</p><h1 id="async-await"><a href="#async-await" class="headerlink" title="async &#x2F; await"></a>async &#x2F; await</h1><p>通过将函数设置为 <code>async</code>，在这个异步函数内部则可通过 <code>await</code> 来进行顺序的处理</p><p>改写上面方法，要定义一个异步方法，<code>async</code> 关键字要写在 <code>function</code> 前面，如果是箭头函数，则在参数前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> loginResponse = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> loginData = <span class="keyword">await</span> loginResponse.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> userInfoResponse = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;userInfo&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> userInfoData = <span class="keyword">await</span> userInfoResponse.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> data = response.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于 <code>fetch</code> 本身是异步的，返回一个 <code>Promise</code>，因此里面通过 <code>await</code> 关键字可以得到最终的结果</p><p>又由于这个方法也设置成了异步方法，所以也需要通过 <code>then()</code> 再来进行最后的处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure><p>值得注意的是，一般情况下，请求不是 2xx 就会当作失败，出异常，理应走 <code>reject</code>，但是这个 <code>fetch</code> 即使出了 404 或者 500，还是走 <code>resolve</code>，这个时候，需要进一步判断它的 <code>ok</code> 属性或 HTTP 状态码，才能判断请求是否正常</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;按照国际惯例，说异步之前，需要说下同步&lt;/p&gt;
&lt;h1 id=&quot;同步&quot;&gt;&lt;a href=&quot;#同步&quot; class=&quot;headerlink&quot; title=&quot;同步&quot;&gt;&lt;/a&gt;同步&lt;/h1&gt;&lt;p&gt;比如如下代码，正常来说，会依次打印 123&lt;/p&gt;
&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="程序设计" scheme="https://linweiyuan.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="JavaScript" scheme="https://linweiyuan.github.io/tags/JavaScript/"/>
    
    <category term="Promise" scheme="https://linweiyuan.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>一种取巧的方式绕过 Cloudflare v2 验证</title>
    <link href="https://linweiyuan.github.io/2023/03/14/%E4%B8%80%E7%A7%8D%E5%8F%96%E5%B7%A7%E7%9A%84%E6%96%B9%E5%BC%8F%E7%BB%95%E8%BF%87-Cloudflare-v2-%E9%AA%8C%E8%AF%81.html"/>
    <id>https://linweiyuan.github.io/2023/03/14/%E4%B8%80%E7%A7%8D%E5%8F%96%E5%B7%A7%E7%9A%84%E6%96%B9%E5%BC%8F%E7%BB%95%E8%BF%87-Cloudflare-v2-%E9%AA%8C%E8%AF%81.html</id>
    <published>2023-03-14T07:09:34.000Z</published>
    <updated>2023-07-27T15:27:10.804Z</updated>
    
    <content type="html"><![CDATA[<p>ChatGPT 一直在反爬虫的方式上下功夫，与第三方 API 开发者斗智斗勇</p><p>网页版服务刚出来的时候，是可以直接调用的</p><p>进入 2023 年，加了 Cloudflare 的验证，这个时候死掉了一堆第三方 API，好多至今仍然是瘫痪状态</p><p>但是通过分析发现，OpenAI 旗下的某个子域名其实在提供着相同的 API 服务，并且没加 CF 验证，于是部分第三方 API 复活</p><p>后面这个域名挂了，另一个域名又出来</p><p>但是在几天前，这个域名也挂了，接口全部 404，之前的第三方 API 又挂了</p><p>留给世人一个难题，如何绕过 CF 验证，方便快捷地使用网页版的服务？</p><p>为什么不用公开 API？总体来说，除了 429，ChatGPT 比公开的 API 智能许多，我都用过有发言权</p><hr><p>在绕过 CF 反爬虫的机制上，做过很多资料查询，使用过各种姿势，最后无一死在 403，尝试过的方式包括：</p><h3 id="请求头修改"><a href="#请求头修改" class="headerlink" title="请求头修改"></a>请求头修改</h3><p>这是最低级的方式，通过修改请求头的方式模拟浏览器，失败</p><h3 id="设置-Cloudflare-Cookie"><a href="#设置-Cloudflare-Cookie" class="headerlink" title="设置 Cloudflare Cookie"></a>设置 Cloudflare Cookie</h3><p>获取 CF 验证码需要的 Cookie，再在请求的时候加上，失败</p><h3 id="JA3-指纹修改"><a href="#JA3-指纹修改" class="headerlink" title="JA3 指纹修改"></a>JA3 指纹修改</h3><p>JA3 指纹识别的原理是什么，这里有篇详细的文章：<a href="https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/">TLS Fingerprinting with JA3 and JA3S</a></p><p>这个发生在握手阶段的 Client Hello 包，通过一些算法来计算出 JA3 指纹，简单来说，一个请求库发出的请求的指纹是固定的，比如我可以知道你的请求是不是来自 cURL，如果是，不合法，直接 403</p><p>这个概念有点类似一些库会自动设置 UserAgent，看下日志就能看得到，只是这个 JA3 发生在更底层的协议中</p><p>Java 这语言太高级了，在涉及 SSL&#x2F;TLS 方面的 API 过于复杂，我也缺少相关知识，所以这部分用 Golang 现有的请求库试过，确实能修改到指纹，这样的话，CF 就不知道我们的请求是来自哪个工具了，但是结果仍然是失败</p><h3 id="JS-逆向"><a href="#JS-逆向" class="headerlink" title="JS 逆向"></a>JS 逆向</h3><p>这个尝试过，不是很懂 JS，太耗时间了，但是如果这个成功了，可能会一劳永逸，如果验证算法更新了，有之前的经验可能随便改改就能适配</p><h3 id="自动化测试工具"><a href="#自动化测试工具" class="headerlink" title="自动化测试工具"></a>自动化测试工具</h3><p>如果用浏览器去访问，就非常正常，所以想到另一种思路，可以在我们的第三方 API 的基础上，外挂个浏览器</p><p>顺其自然就会想到用 Selenium 或者其他类似的模拟浏览器的自动化测试工具，发送请求到我们的 API 的时候，模拟浏览器的点击操作发送请求</p><p>但是发现，如果用这些工具打开 ChatGPT，会一直重复出现 CF 验证码，点了之后又出现，再点还出现，无论试了 Selenium、Puppeteer、Playwright，结果都是一样</p><p>查询资料发现，其实这些所谓 <code>WebDriver</code> 的实现都会遵循一个规范，就是使用这些工具的时候，获取 <code>navigator</code> 的 <code>webdriver</code> 属性时，会返回 <code>true</code>，而普通浏览器会返回 <code>undefined</code></p><p>那我们是不是可以覆盖它的默认实现，比如自定义 <code>function</code>，当访问这个属性的时候返回 <code>undefined</code>？试过了，不行，包括加一些 <code>ChromeOptions</code>，也不行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">webDriver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChromeDriver</span>(chromeOptions);</span><br><span class="line">webDriver.executeCdpCommand(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, Map.of(</span><br><span class="line">        <span class="string">&quot;source&quot;</span>, <span class="string">&quot;Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;get: () =&gt; undefined&#125;)&quot;</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>正当准备弃坑的时候，发现了一个工具确实能绕过 CF 验证，那就是 <a href="https://github.com/ultrafunkamsterdam/undetected-chromedriver">undetected_chromedriver</a></p><p>利用这个库能通过 CF 验证进入登录界面，是不是就可以登录，然后操作 <code>dom</code> 模拟数据输入和发送呢？理论上是，我没试，因为突然想到了另外一种方式</p><h3 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h3><p>既然这个 <code>undetected_chromedriver</code> 能正常打开页面，而我们的请求都是 XHR，那如果直接通过 JS 操作 XHR 会发生什么？</p><p>结果是 200，某种程序上来说，已经成功绕过了 CF 验证</p><p>于是开始重写 API，将我们第三方 API 对 ChatGPT 的 API 的调用统统改成 JS</p><p>由于我大多写 Java，对于 JS 掌握得不是很好，这个时候遇到一个难题</p><p>普通的阻塞 API 都可以用 <code>executeScript()</code> 然后通过 <code>return xhr.responseText;</code> 返回响应，但是对话的时候，是 <code>text/event-stream</code>，这个时候如何处理</p><p>我知道 <code>Spring</code> 有个 <code>WebFlux</code> 是专门做这个事情的，但是我们又该如何从 JS 那里接管响应数据呢？ 接管到数据后，如何又把它们整合到 <code>Flux</code> 里返回呢？</p><p>首先是第二个问题的解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Flux.create(fluxSink -&gt; &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果正常拿到数据</span></span><br><span class="line">        fluxSink.next(data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没数据了或者报错</span></span><br><span class="line">        fluxSink.complete();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如何获取数据？</p><p>通过判断 XHR 状态码可以判断数据是不是在传输，比如 <code>LOADING</code> 则目前正在返回对话内容，<code>DONE</code> 则结束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === xhr.<span class="property">LOADING</span>) &#123;</span><br><span class="line">    <span class="comment">// 接收数据</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === xhr.<span class="property">DONE</span>) &#123;</span><br><span class="line">    <span class="comment">// 结束</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>问题在于如何跨语言在 JS 里接收到数据再传到 Java 里，Java 可以通过一些脚本引擎执行 JS，但是在这里并不适用</p><p>于是想到了 <code>callback</code> 的方式，构造一个 Java 对象传进去，编译成功，但是运行报错，不认识传的对象，这个也正常</p><p><img src="/2023/03/14/%E4%B8%80%E7%A7%8D%E5%8F%96%E5%B7%A7%E7%9A%84%E6%96%B9%E5%BC%8F%E7%BB%95%E8%BF%87-Cloudflare-v2-%E9%AA%8C%E8%AF%81/executeAsyncScript.png"></p><p><img src="/2023/03/14/%E4%B8%80%E7%A7%8D%E5%8F%96%E5%B7%A7%E7%9A%84%E6%96%B9%E5%BC%8F%E7%BB%95%E8%BF%87-Cloudflare-v2-%E9%AA%8C%E8%AF%81/WebElementToJsonConverter.png"></p><p>还有别的方法吗，发现有一个 <code>postMessage()</code> 可以用来跨源异步通信，那么不就能满足我们的需求了吗</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)；</span><br></pre></td></tr></table></figure><p>只是不知如何和 XHR 脚本结合起来</p><p>因为异步脚本执行要通过 callback 返回数据，而这个 callback 又不能设置在 XHR 发送阶段，因为要频繁 callback 返回数据，这样就会频繁发送请求，所以必须在新的方法里处理，而这个 <code>postMessage()</code> 又需要通过 <code>addEventListener()</code> 的方式获取，所以这里很多矛盾的地方</p><p>我也不是很清楚频繁 <code>addEventListener</code> 会发生什么，有尝试过一些判断，如果没有设置过再设置，不好使</p><p>同样也不清楚设置多个会不会接收到重复数据，于是代码里先 <code>remove</code> 再 <code>add</code>，不知道合不合理，这个是目前得到的最折中的方法，并且能实现想要的效果，只是异步脚本执行会频繁超时，导致报错，这个还没知道怎么解决（后期已解决这个问题）</p><h3 id="undetected-chromedriver"><a href="#undetected-chromedriver" class="headerlink" title="undetected_chromedriver"></a>undetected_chromedriver</h3><p>这个库是如何做到不被检测出来的，它在启动的时候修改了 driver 的一些数据，在运行时可以看到会打印在 <code>console</code> 里：</p><ul><li><a href="https://github.com/ultrafunkamsterdam/undetected-chromedriver/blob/master/undetected_chromedriver/__init__.py#L246">https://github.com/ultrafunkamsterdam/undetected-chromedriver/blob/master/undetected_chromedriver/__init__.py#L246</a></li><li><a href="https://github.com/ultrafunkamsterdam/undetected-chromedriver/blob/master/undetected_chromedriver/patcher.py#L91-L99">https://github.com/ultrafunkamsterdam/undetected-chromedriver/blob/master/undetected_chromedriver/patcher.py#L91-L99</a></li><li><a href="https://github.com/ultrafunkamsterdam/undetected-chromedriver/blob/master/undetected_chromedriver/patcher.py#L222-L228">https://github.com/ultrafunkamsterdam/undetected-chromedriver/blob/master/undetected_chromedriver/patcher.py#L222-L228</a></li></ul><p>而在运行的时候，修改过的 driver 会放在 <code>~/.local/share/undetected_chromedriver</code> 里，运行完会删除，可以趁这个时间复制出来供后续使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">./undetected_chromedriver --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage: ./undetected_chromedriver [OPTIONS]</span><br><span class="line"></span><br><span class="line">Options</span><br><span class="line">  --port=PORT                     port to listen on</span><br><span class="line">  --adb-port=PORT                 adb server port</span><br><span class="line">  --log-path=FILE                 write server <span class="built_in">log</span> to file instead of stderr, increases <span class="built_in">log</span> level to INFO</span><br><span class="line">  --log-level=LEVEL               <span class="built_in">set</span> <span class="built_in">log</span> level: ALL, DEBUG, INFO, WARNING, SEVERE, OFF</span><br><span class="line">  --verbose                       <span class="built_in">log</span> verbosely (equivalent to --log-level=ALL)</span><br><span class="line">  --silent                        <span class="built_in">log</span> nothing (equivalent to --log-level=OFF)</span><br><span class="line">  --append-log                    append <span class="built_in">log</span> file instead of rewriting</span><br><span class="line">  --replayable                    (experimental) <span class="built_in">log</span> verbosely and don<span class="string">&#x27;t truncate long strings so that the log can be replayed.</span></span><br><span class="line"><span class="string">  --version                       print the version number and exit</span></span><br><span class="line"><span class="string">  --url-base                      base URL path prefix for commands, e.g. wd/url</span></span><br><span class="line"><span class="string">  --readable-timestamp            add readable timestamps to log</span></span><br><span class="line"><span class="string">  --enable-chrome-logs            show logs from the browser (overrides other logging options)</span></span><br><span class="line"><span class="string">  --bidi-mapper-path              custom bidi mapper path</span></span><br><span class="line"><span class="string">  --disable-dev-shm-usage         do not use /dev/shm (add this switch if seeing errors related to shared memory)</span></span><br><span class="line"><span class="string">  --allowed-ips=LIST              comma-separated allowlist of remote IP addresses which are allowed to connect to ChromeDriver</span></span><br><span class="line"><span class="string">  --allowed-origins=LIST          comma-separated allowlist of request origins which are allowed to connect to ChromeDriver. Using `*` to allow any host origin is dangerous!</span></span><br></pre></td></tr></table></figure><p>在本地测试的时候可以使用 <code>undetected_chromedriver --allowed-ips=&quot;&quot; --allowed-origins=&quot;*&quot;</code> 来启动，公网要考虑风险</p><p>这样就能在 API 外再套一层这个来绕过 Cloudflare v2 验证了</p><p>网页版使用的时候，需要频繁刷新，尝试过写个定时器去主动刷新，效果是可以的，只是如果在对话响应处理的过程中刚好碰上自动刷新，对话就会戛然而止，于是改为了被动刷新</p><p>如果请求过来，先发一个 XHR 去看下是不是 200，如果是 403，则刷新网页拿新 Cookie，再去请求 API，效果也还行</p><p>（后期又改回了定时刷新，并且在对话中不刷新）</p><hr><p>打包了一个 Docker 镜像：<a href="https://hub.docker.com/r/linweiyuan/chatgpt-proxy-server">linweiyuan&#x2F;chatgpt-proxy-server</a>，开箱即用</p><p>尝试过用 Alpine，硬是缺少一些库，于是用回熟悉的 Arch，只是最终镜像有点大，压缩后 <code>413.19 MB</code>，解压后 <code>1.16GB</code></p><p><a href="https://github.com/linweiyuan/docker-services/tree/main/linweiyuan/chatgpt-proxy-server#dockerfile">Dockerfile</a></p><p>可过验证码</p><p><img src="/2023/03/14/%E4%B8%80%E7%A7%8D%E5%8F%96%E5%B7%A7%E7%9A%84%E6%96%B9%E5%BC%8F%E7%BB%95%E8%BF%87-Cloudflare-v2-%E9%AA%8C%E8%AF%81/with_captcha.png"></p><p><img src="/2023/03/14/%E4%B8%80%E7%A7%8D%E5%8F%96%E5%B7%A7%E7%9A%84%E6%96%B9%E5%BC%8F%E7%BB%95%E8%BF%87-Cloudflare-v2-%E9%AA%8C%E8%AF%81/without_captcha.png"></p><p><img src="/2023/03/14/%E4%B8%80%E7%A7%8D%E5%8F%96%E5%B7%A7%E7%9A%84%E6%96%B9%E5%BC%8F%E7%BB%95%E8%BF%87-Cloudflare-v2-%E9%AA%8C%E8%AF%81/click_captcha.png"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>第三方 API:</p><ul><li>基于 Java 实现：<a href="https://github.com/linweiyuan/java-chatgpt-api">java-chatgpt-api</a></li><li>基于 Go 实现：<a href="https://github.com/linweiyuan/go-chatgpt-api">go-chatgpt-api</a></li></ul><p>第三方客户端：</p><ul><li>Java 图形化界面：<a href="https://github.com/linweiyuan/ChatGPT-Swing">ChatGPT-Swing</a></li><li>Go 终端程序：<a href="https://github.com/linweiyuan/go-chatgpt">go-chatgpt</a></li></ul><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><h4 id="（晚上卡顿版）"><a href="#（晚上卡顿版）" class="headerlink" title="（晚上卡顿版）"></a>（晚上卡顿版）</h4><div>  <video-js id="videojs-id-72aaa99e-6a4e-4b63-b3d5-be9e2807b42d"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/chatgpt-proxy-server/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsid72aaa99e6a4e4b63b3d5be9e2807b42d = videojs('videojs-id-72aaa99e-6a4e-4b63-b3d5-be9e2807b42d', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> <h4 id="（白天流畅版）"><a href="#（白天流畅版）" class="headerlink" title="（白天流畅版）"></a>（白天流畅版）</h4><div>  <video-js id="videojs-id-cfb0439c-0d0c-4340-ac00-c22c14e6d584"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/chatgpt-proxy-server-20230326/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsidcfb0439c0d0c4340ac00c22c14e6d584 = videojs('videojs-id-cfb0439c-0d0c-4340-ac00-c22c14e6d584', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ChatGPT 一直在反爬虫的方式上下功夫，与第三方 API 开发者斗智斗勇&lt;/p&gt;
&lt;p&gt;网页版服务刚出来的时候，是可以直接调用的&lt;/p&gt;
&lt;p&gt;进入 2023 年，加了 Cloudflare 的验证，这个时候死掉了一堆第三方 API，好多至今仍然是瘫痪状态&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/categories/ChatGPT/"/>
    
    
    <category term="Java" scheme="https://linweiyuan.github.io/tags/Java/"/>
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/tags/ChatGPT/"/>
    
    <category term="Selenium" scheme="https://linweiyuan.github.io/tags/Selenium/"/>
    
    <category term="Cloudflare" scheme="https://linweiyuan.github.io/tags/Cloudflare/"/>
    
    <category term="Golang" scheme="https://linweiyuan.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>go-chatgpt</title>
    <link href="https://linweiyuan.github.io/2023/03/05/go-chatgpt.html"/>
    <id>https://linweiyuan.github.io/2023/03/05/go-chatgpt.html</id>
    <published>2023-03-05T09:01:34.000Z</published>
    <updated>2023-07-27T15:27:10.800Z</updated>
    
    <content type="html"><![CDATA[<p>弄了个终端版，只需 <code>accessToken</code> 即可使用，非常简洁</p><p>简洁到连异常处理都没有做，勉强能用：<a href="https://github.com/linweiyuan/go-chatgpt">go-chatgpt</a></p><script async id="asciicast-dh8QWcMPpefJ4mQ4n4i5E3ITc" src="https://asciinema.org/a/dh8QWcMPpefJ4mQ4n4i5E3ITc.js"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;弄了个终端版，只需 &lt;code&gt;accessToken&lt;/code&gt; 即可使用，非常简洁&lt;/p&gt;
&lt;p&gt;简洁到连异常处理都没有做，勉强能用：&lt;a href=&quot;https://github.com/linweiyuan/go-chatgpt&quot;&gt;go-chatgpt&lt;/a&gt;&lt;/</summary>
      
    
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/categories/ChatGPT/"/>
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/tags/ChatGPT/"/>
    
    <category term="Golang" scheme="https://linweiyuan.github.io/tags/Golang/"/>
    
    <category term="TUI" scheme="https://linweiyuan.github.io/tags/TUI/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT-Swing</title>
    <link href="https://linweiyuan.github.io/2023/02/25/ChatGPT-Swing.html"/>
    <id>https://linweiyuan.github.io/2023/02/25/ChatGPT-Swing.html</id>
    <published>2023-02-25T07:36:39.000Z</published>
    <updated>2023-07-27T15:27:10.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="由于官方关闭了用到的-API，部分内容已过期"><a href="#由于官方关闭了用到的-API，部分内容已过期" class="headerlink" title="由于官方关闭了用到的 API，部分内容已过期"></a>由于官方关闭了用到的 API，部分内容已过期</h1><hr><p>新增了 API 切换支持，可以选择使用 API （API Key）还是 ChatGPT （Access Token）</p><p><img src="/2023/02/25/ChatGPT-Swing/mode_switch.png"></p><p>支持查询当前免费额度</p><p><img src="/2023/02/25/ChatGPT-Swing/check_usage.png"></p><hr><p><strong><a href="https://github.com/linweiyuan/ChatGPT-Swing">ChatGPT-Swing</a></strong> 是一个非官方的 GUI 程序，利用 Java Swing 技术实现，基于网页版 ChatGPT（3.5），而非公开的 GPT-3 API。利用这个程序，你可以做很多网页版可以做的事（<code>Regenerate response</code> 感觉没必要就没做），包括：</p><ul><li>账号登录（谷歌账号和微软账号还没测试）</li><li>accessToken 自动刷新（比如明天过期，今天打开程序就会尝试刷新）</li><li>对话新增与聊天（支持关联上下文）</li><li>删除单个对话（看请求参数其实是隐藏，但隐藏后你再访问这个 id 就会 404）</li><li>删除所有对话</li><li>重命名对话标题</li><li>消息反馈（点赞或点踩）</li><li>文本转语音（调用 <a href="https://freetts.com/">Free TTS</a> 的在线测试服务，每周对单个 IP 有字数限制，这个网站是支持很多语言的，程序里目前仅支持英语，写死了）</li></ul><p>同时免除了烦人的 Cloudflare 验证，挂机后回来随时对话无需刷新网页</p><p>缺点就是非官方 API，随时失效，还可能有 Bug</p><hr><p>项目依赖</p><p><img src="/2023/02/25/ChatGPT-Swing/dependencies.png"></p><hr><h1 id="下面是部分截图"><a href="#下面是部分截图" class="headerlink" title="下面是部分截图"></a>下面是部分截图</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><img src="/2023/02/25/ChatGPT-Swing/login.png"></p><p>程序一开始的设计是直接访问 ChatGPT 服务，这个选项就有用，因为登录的时候会检测当前国家或地区是否支持，登录完成后再调用其他 API 一般就不用了，通常都可以直连，所以这个代理选项只对登录接口有效，并且是本地代理，不是说设置了之后服务器就会用这个代理再去访问 ChatGPT 服务</p><p>后来用 Go 测试登录，发现，在我本地相同的网络环境下，如果 Kotlin 这边直接调用 ChatGPT 登录服务，整套流程包括拿 CSRF token 和一些重定向、用户名密码检测、最终拿 accessToken，需要 10 秒左右</p><p>神奇的事情发生了，利用 Go 去登录，仅需 5 秒左右，于是干脆起了个 Gin 服务，转发所有请求</p><p>这个不是瞎说的，直接登录 ChatGPT 的代码在早期的 commit 里，有兴趣的可以自行 checkout 测试</p><p>但这导致了一个问题，如果当前 IP 不在支持范围内，即使登录时开启代理也没用</p><p>但是我也没删除，就这样先留着了，因为还有一种潜在的场景就是，在你的本地环境下，确实需要代理才能更快地访问你的自建 API 服务，然后 API 服务将登录接口单独再经一层转发到受支持国家或地区服务器（脑回路比较不寻常就是了）</p><h2 id="主界面的组件选择"><a href="#主界面的组件选择" class="headerlink" title="主界面的组件选择"></a>主界面的组件选择</h2><p>每次新建的对话，会自动调用接口生成标题，左边是一个树形组件（根节点隐藏了），跟着的节点是每个对话，其中显示的是对话标题。对话下面的是每次问答，其中问的问题会作为对话的子节点加入树中，中间区域则显示 ChatGPT 的响应信息</p><p>这部分 UI 经过了重构，一开始打算用 <code>JList</code>，类似网页版的效果，点击显示所有，然后中间用 <code>JTextArea</code> 直接追加就完了，但是请求和响应颜色一样，看瞎眼</p><p>接着中间区域又改成 <code>JTextPane</code>，以 HTML 的方式显示数据，加一些 css 来修改对话的背景色来区分自己的请求的 ChatGPT 的响应，也不好使，勉强能用</p><p>左边后来改成了 <code>JTree</code>，点击父节点显示整个对话内容，点击子节点就显示本次问答，测试完成差强人意</p><p>然后无意中发现了一个好用的库 <code>RSyntaxTextArea</code>，解决了代码高亮、折叠等问题，除了 <code>&#39;s</code> 这个符号偶尔错误解析自动换行，最终的效果就比较理想了，也就是现在的模样</p><h3 id="点击父节点显示整个对话内容（关联上下文）"><a href="#点击父节点显示整个对话内容（关联上下文）" class="headerlink" title="点击父节点显示整个对话内容（关联上下文）"></a>点击父节点显示整个对话内容（关联上下文）</h3><p><img src="/2023/02/25/ChatGPT-Swing/context_association.png"></p><h3 id="点击子节点显示本次请求响应"><a href="#点击子节点显示本次请求响应" class="headerlink" title="点击子节点显示本次请求响应"></a>点击子节点显示本次请求响应</h3><p><img src="/2023/02/25/ChatGPT-Swing/show_message.png"></p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p><img src="/2023/02/25/ChatGPT-Swing/highlight_selection.png"></p><p><img src="/2023/02/25/ChatGPT-Swing/syntax_highlight.png"></p><p><img src="/2023/02/25/ChatGPT-Swing/Linux.png"></p><p><img src="/2023/02/25/ChatGPT-Swing/macOS.png"></p><p><code>RSyntaxTextArea</code> <a href="https://github.com/bobbylight/RSyntaxTextArea/blob/master/RSyntaxTextArea/src/main/java/org/fife/ui/rsyntaxtextarea/SyntaxConstants.java">内建支持列表</a></p><h3 id="父节点右键菜单"><a href="#父节点右键菜单" class="headerlink" title="父节点右键菜单"></a>父节点右键菜单</h3><p><img src="/2023/02/25/ChatGPT-Swing/conversation_menu.png"></p><ul><li>刷新选中对话内容</li><li>重命名选中对话<br><img src="/2023/02/25/ChatGPT-Swing/rename_conversation.png"><br><img src="/2023/02/25/ChatGPT-Swing/rename_conversation_after.png"></li><li>删除选中对话<br><img src="/2023/02/25/ChatGPT-Swing/delete_conversation.png"><br><img src="/2023/02/25/ChatGPT-Swing/delete_conversation_after.png"></li></ul><h3 id="清空所有对话"><a href="#清空所有对话" class="headerlink" title="清空所有对话"></a>清空所有对话</h3><p><img src="/2023/02/25/ChatGPT-Swing/clear_all_conversations.png"></p><h3 id="子节点右键菜单"><a href="#子节点右键菜单" class="headerlink" title="子节点右键菜单"></a>子节点右键菜单</h3><p><img src="/2023/02/25/ChatGPT-Swing/message_menu.png"></p><ul><li>反馈（这里没有加文本反馈，网页版有，并且网页版如果点赞了再点踩是可以的，这里会报错）<br><img src="/2023/02/25/ChatGPT-Swing/feedback.png"><br><img src="/2023/02/25/ChatGPT-Swing/feedback_done.png"><br><img src="/2023/02/25/ChatGPT-Swing/feedback_error.png"></li></ul><h3 id="文本转语音"><a href="#文本转语音" class="headerlink" title="文本转语音"></a>文本转语音</h3><p>选中文本点击 TTS 按钮则可（这个有诸多限制，在文章一开始有写）</p><hr><h1 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h1><div>  <video-js id="videojs-id-bfbef8b5-95cd-4cd8-82c9-bea4d955e23c"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/chatgpt-swing/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsidbfbef8b595cd4cd882c9bea4d955e23c = videojs('videojs-id-bfbef8b5-95cd-4cd8-82c9-bea4d955e23c', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;由于官方关闭了用到的-API，部分内容已过期&quot;&gt;&lt;a href=&quot;#由于官方关闭了用到的-API，部分内容已过期&quot; class=&quot;headerlink&quot; title=&quot;由于官方关闭了用到的 API，部分内容已过期&quot;&gt;&lt;/a&gt;由于官方关闭了用到的 API，部分内容已</summary>
      
    
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/categories/ChatGPT/"/>
    
    
    <category term="Java" scheme="https://linweiyuan.github.io/tags/Java/"/>
    
    <category term="Kotlin" scheme="https://linweiyuan.github.io/tags/Kotlin/"/>
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/tags/ChatGPT/"/>
    
    <category term="Swing" scheme="https://linweiyuan.github.io/tags/Swing/"/>
    
  </entry>
  
  <entry>
    <title>jsoup1.15.4奇怪bug排查</title>
    <link href="https://linweiyuan.github.io/2023/02/22/jsoup1-15-4%E5%A5%87%E6%80%AAbug%E6%8E%92%E6%9F%A5.html"/>
    <id>https://linweiyuan.github.io/2023/02/22/jsoup1-15-4%E5%A5%87%E6%80%AAbug%E6%8E%92%E6%9F%A5.html</id>
    <published>2023-02-22T10:54:55.000Z</published>
    <updated>2023-07-27T15:27:10.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方团队很快就修复了"><a href="#官方团队很快就修复了" class="headerlink" title="官方团队很快就修复了"></a>官方团队很快就修复了</h1><p><a href="https://github.com/jhy/jsoup/issues/1902">https://github.com/jhy/jsoup/issues/1902</a></p><hr><p>jsoup 是目前个人用过的简单易用轻量的很好的一个工具，特别是解析网页方面，爬虫、模拟登录等</p><p>目前有个项目也有用到，我是比较喜欢用新的版本的，所以当时就用了 1.15.3 最新，一直相安无事</p><p>昨天看见 pom.xml 报黄，于是升级至 1.15.4，好多 API 请求都正常</p><p>这里插句题外话，JDK 在源码级别不支持 PATCH 方法，比如 <code>java.net.HttpURLConnection</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.net;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HttpURLConnection</span> <span class="keyword">extends</span> <span class="title class_">URLConnection</span> &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">/* valid HTTP methods */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] methods = &#123;</span><br><span class="line">        <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;TRACE&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the method for the URL request, one of:</span></span><br><span class="line"><span class="comment">     * &lt;UL&gt;</span></span><br><span class="line"><span class="comment">     *  &lt;LI&gt;GET</span></span><br><span class="line"><span class="comment">     *  &lt;LI&gt;POST</span></span><br><span class="line"><span class="comment">     *  &lt;LI&gt;HEAD</span></span><br><span class="line"><span class="comment">     *  &lt;LI&gt;OPTIONS</span></span><br><span class="line"><span class="comment">     *  &lt;LI&gt;PUT</span></span><br><span class="line"><span class="comment">     *  &lt;LI&gt;DELETE</span></span><br><span class="line"><span class="comment">     *  &lt;LI&gt;TRACE</span></span><br><span class="line"><span class="comment">     * &lt;/UL&gt; are legal, subject to protocol restrictions.  The default</span></span><br><span class="line"><span class="comment">     * method is GET.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method the HTTP method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>    ProtocolException if the method cannot be reset or if</span></span><br><span class="line"><span class="comment">     *              the requested method isn&#x27;t valid for HTTP.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>    SecurityException if a security manager is set and the</span></span><br><span class="line"><span class="comment">     *              method is &quot;TRACE&quot;, but the &quot;allowHttpTrace&quot;</span></span><br><span class="line"><span class="comment">     *              NetPermission is not granted.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getRequestMethod()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRequestMethod</span><span class="params">(String method)</span> <span class="keyword">throws</span> ProtocolException &#123;</span><br><span class="line">        <span class="keyword">if</span> (connected) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProtocolException</span>(<span class="string">&quot;Can&#x27;t reset method: already connected&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// This restriction will prevent people from using this class to</span></span><br><span class="line">        <span class="comment">// experiment w/ new HTTP methods using java.  But it should</span></span><br><span class="line">        <span class="comment">// be placed for security - the request String could be</span></span><br><span class="line">        <span class="comment">// arbitrarily long.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (methods[i].equals(method)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.equals(<span class="string">&quot;TRACE&quot;</span>)) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;removal&quot;)</span></span><br><span class="line">                    <span class="type">SecurityManager</span> <span class="variable">s</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">                    <span class="keyword">if</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                        s.checkPermission(<span class="keyword">new</span> <span class="title class_">NetPermission</span>(<span class="string">&quot;allowHttpTrace&quot;</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">this</span>.method = method;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProtocolException</span>(<span class="string">&quot;Invalid HTTP method: &quot;</span> + method);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>试过 <code>X-Method-Override</code> 也不好使，于是部分 PATCH 的接口改用 okhttp3</p><hr><p>今天重新测试的时候，发现登录接口不好使了，因为登录是一条 Auth0 的链接，<code>https://auth0.xxx.com/authorize?client_id=xxx&amp;scope=openid%20email%20profile</code>，scope 里面的值是有空格分开的</p><p><img src="/2023/02/22/jsoup1-15-4%E5%A5%87%E6%80%AAbug%E6%8E%92%E6%9F%A5/1.png"></p><p>‘%’ 也会被转码</p><p><img src="/2023/02/22/jsoup1-15-4%E5%A5%87%E6%80%AAbug%E6%8E%92%E6%9F%A5/2.png"></p><p><img src="/2023/02/22/jsoup1-15-4%E5%A5%87%E6%80%AAbug%E6%8E%92%E6%9F%A5/3.png"></p><p>在 1.15.3 里面正常，在 1.15.4 里会把 <code>%20</code> 里面的 <code>%</code> 也重新编码，导致出现 <code>%2520</code>，服务器就报错了</p><p><img src="/2023/02/22/jsoup1-15-4%E5%A5%87%E6%80%AAbug%E6%8E%92%E6%9F%A5/4.png"></p><p>获取不到 state，无法登录系统</p><p><img src="/2023/02/22/jsoup1-15-4%E5%A5%87%E6%80%AAbug%E6%8E%92%E6%9F%A5/5.png"></p><p>回滚后一切正常</p><p><img src="/2023/02/22/jsoup1-15-4%E5%A5%87%E6%80%AAbug%E6%8E%92%E6%9F%A5/6.png"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;官方团队很快就修复了&quot;&gt;&lt;a href=&quot;#官方团队很快就修复了&quot; class=&quot;headerlink&quot; title=&quot;官方团队很快就修复了&quot;&gt;&lt;/a&gt;官方团队很快就修复了&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jhy/jsoup/</summary>
      
    
    
    
    <category term="程序设计" scheme="https://linweiyuan.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="Java" scheme="https://linweiyuan.github.io/tags/Java/"/>
    
    <category term="jsoup" scheme="https://linweiyuan.github.io/tags/jsoup/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT如何教我写Python</title>
    <link href="https://linweiyuan.github.io/2023/02/21/ChatGPT%E5%A6%82%E4%BD%95%E6%95%99%E6%88%91%E5%86%99Python.html"/>
    <id>https://linweiyuan.github.io/2023/02/21/ChatGPT%E5%A6%82%E4%BD%95%E6%95%99%E6%88%91%E5%86%99Python.html</id>
    <published>2023-02-21T16:30:34.000Z</published>
    <updated>2023-07-27T15:27:10.792Z</updated>
    
    <content type="html"><![CDATA[<p>有时候并不是不会一样东西，只是不熟悉语法，比如广州去北京，大家都知道往北，但是需要一个导航才能去；比如英语口语，到嘴边了不知道怎么表达出来</p><p>ChatGPT 就是这样一个帮手</p><div>  <video-js id="videojs-id-64ec28d8-d824-4fe7-a177-24982d54b5b8"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/chatgpt-teach-python/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsid64ec28d8d8244fe7a17724982d54b5b8 = videojs('videojs-id-64ec28d8-d824-4fe7-a177-24982d54b5b8', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时候并不是不会一样东西，只是不熟悉语法，比如广州去北京，大家都知道往北，但是需要一个导航才能去；比如英语口语，到嘴边了不知道怎么表达出来&lt;/p&gt;
&lt;p&gt;ChatGPT 就是这样一个帮手&lt;/p&gt;
&lt;div&gt;
  &lt;video-js id=&quot;videojs-id-64ec28</summary>
      
    
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/categories/ChatGPT/"/>
    
    
    <category term="ChatGPT" scheme="https://linweiyuan.github.io/tags/ChatGPT/"/>
    
    <category term="Python" scheme="https://linweiyuan.github.io/tags/Python/"/>
    
    <category term="Selenium" scheme="https://linweiyuan.github.io/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>Unity练习时长两天半</title>
    <link href="https://linweiyuan.github.io/2023/02/12/Unity%E7%BB%83%E4%B9%A0%E6%97%B6%E9%95%BF%E4%B8%A4%E5%A4%A9%E5%8D%8A.html"/>
    <id>https://linweiyuan.github.io/2023/02/12/Unity%E7%BB%83%E4%B9%A0%E6%97%B6%E9%95%BF%E4%B8%A4%E5%A4%A9%E5%8D%8A.html</id>
    <published>2023-02-12T16:10:52.000Z</published>
    <updated>2023-07-27T15:27:10.800Z</updated>
    
    <content type="html"><![CDATA[<p>精神状态不用怀疑，很正常</p><div>  <video-js id="videojs-id-8d6b646b-be74-460f-ad40-6a8a415a6d9d"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/unity-practice-demo/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsid8d6b646bbe74460fad406a8a415a6d9d = videojs('videojs-id-8d6b646b-be74-460f-ad40-6a8a415a6d9d', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;精神状态不用怀疑，很正常&lt;/p&gt;
&lt;div&gt;
  &lt;video-js id=&quot;videojs-id-8d6b646b-be74-460f-ad40-6a8a415a6d9d&quot; 
    class=&quot;vjs-default-skin vjs-16-9&quot; 
    contr</summary>
      
    
    
    
    <category term="Unity" scheme="https://linweiyuan.github.io/categories/Unity/"/>
    
    
    <category term="Unity" scheme="https://linweiyuan.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>LMMS-原野追逐</title>
    <link href="https://linweiyuan.github.io/2023/02/11/LMMS-%E5%8E%9F%E9%87%8E%E8%BF%BD%E9%80%90.html"/>
    <id>https://linweiyuan.github.io/2023/02/11/LMMS-%E5%8E%9F%E9%87%8E%E8%BF%BD%E9%80%90.html</id>
    <published>2023-02-11T18:34:19.000Z</published>
    <updated>2023-07-27T15:27:10.796Z</updated>
    
    <content type="html"><![CDATA[<div>  <video-js id="videojs-id-bbffcf5b-465a-4b74-804d-1caea3ccc61a"     class="vjs-default-skin vjs-16-9"     controls     preload="auto"     width="100%"     height="350px">    <source src="https://video.linweiyuan.com/lmms-cornfield-chase/index.m3u8" type="application&#x2F;x-mpegURL">  </video-js>      <script>    const videojsidbbffcf5b465a4b74804d1caea3ccc61a = videojs('videojs-id-bbffcf5b-465a-4b74-804d-1caea3ccc61a', {      html5: {        hls: {          overrideNative: true        }      }    });  </script>  </div> ]]></content>
    
    
      
      
    <summary type="html">&lt;div&gt;
  &lt;video-js id=&quot;videojs-id-bbffcf5b-465a-4b74-804d-1caea3ccc61a&quot; 
    class=&quot;vjs-default-skin vjs-16-9&quot; 
    controls 
    preload=&quot;au</summary>
      
    
    
    
    <category term="LMMS" scheme="https://linweiyuan.github.io/categories/LMMS/"/>
    
    
    <category term="LMMS" scheme="https://linweiyuan.github.io/tags/LMMS/"/>
    
    <category term="原野追逐" scheme="https://linweiyuan.github.io/tags/%E5%8E%9F%E9%87%8E%E8%BF%BD%E9%80%90/"/>
    
    <category term="Cornfield Chase" scheme="https://linweiyuan.github.io/tags/Cornfield-Chase/"/>
    
    <category term="星际穿越" scheme="https://linweiyuan.github.io/tags/%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A/"/>
    
  </entry>
  
</feed>
